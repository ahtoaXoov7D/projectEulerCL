#!/usr/bin/env clojure

(defn digits [number]
  (map #(- (int %) 48) (str number))) 

(defn prime-factors-of [num]
  "Returns a sorted list of prime factors of num, including multiplicity."
  (let [q (Math/sqrt num)
        factor? (fn [nom den] (zero? (rem nom den)))]
    (loop [n num
           d 2
           r []]
      (cond
        (> d q) (concat r [n])
        (= n d) (concat r [n])
        (factor? n d) (recur (/ n d) d (conj r d))
        true          (recur n (inc d) r)))))

(defn num-divisors-fast [num]
  (let [freqs (reduce #(assoc %1 %2 (inc (get %1 %2 0)))
                      {} (prime-factors-of num))]
    (reduce #(* %1 (inc %2)) 1 (vals freqs))))

(defn prime? [n]
  (and 
    (not (or (= n 1) (= n 0)))
    (= (num-divisors-fast n) 2)))

(defn circular-prime? [n]
  (every? prime? (map #(Integer/parseInt (join %)) (rotations (digits n)))))

(println (count (filter circular-prime? (range 1000000))))
