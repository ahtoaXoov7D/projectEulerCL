import sage.all as _

# def cb(n, m):
#     return _.factorial(n) / _.factorial(m) / _.factorial(n - m)

def solve_old(n):
    ans = 0

    # for 1, 2, 3, 4
    ans += 4

    # for 12, 13, 24, 34
    ans += 4 * (n - 1)

    # for 14, 23
    ans += 2 * (cb(2 * n, n) - 2)

    # for 123, 124, 134, 234
    # s = 0
    # for i in range(1, n):
    #     for j in range(1, n):
    #         s += cb(i + j, i)
    # ans += 4 * s
    ans += 4 * (cb(2 * n, n) - 2 * n)

    # for 1234
    # s = 0
    # for a in range(n):
    #     for b in range(n):
    #         box = (n - a - 1) * (n - b - 1)
    #         s += box * cb(a + b, a) * 2
    # print "n = %d, s = %d, cb = %d" % (n, s, cb(2 * n, n) * 2 - s - 2 * n * n - 2)
    ans += 2 * cb(2 * n, n) - 2 * n * n - 2
    ans -= (n - 1)**2

    return ans

MOD = 10**8 + 7

cdef int fac[100000010]
cdef int caf[100000010]

# cdef long fac(long n):
#     cdef long ret = 1
#     cdef long mod = MOD

#     for i in range(1, n + 1):
#         ret = ret * i % mod
#     return ret

cdef long factorial(int n):
    return fac[n]

def cb(n, m):
    if n > MOD:
        ans = cb(n // MOD, m // MOD)
        if ans == 0:
            return 0
        return ans * cb(n % MOD, m % MOD) % MOD
    if n < m:
        return 0
    return factorial(n) * _.inverse_mod(factorial(m) * factorial(n - m), MOD) % MOD


def solve(n):
    ans = 8 * cb(2 * n, n) - 7 - 2 * n - 3 * n * n
    return (ans % MOD + MOD) % MOD

fac[0] = 1
lmt = MOD - 1
for i in range(1, lmt + 1):
    fac[i] = <long>fac[i - 1] * i % MOD
print 'step 1'
caf[lmt] = _.inverse_mod(fac[lmt], MOD)
for i in range(lmt, 0, -1):
    caf[i - 1] = <long>caf[i] * i % MOD

ans = 0
for i in range(2, 91):
    print i, _.fibonacci(i)
    ans += solve(_.fibonacci(i))
print "ans = %d" % ans

# for i in range(1, 11):
#     print i, solve(i), _.fibonacci(i)
