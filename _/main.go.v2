package main

import (
	"fmt"
	"math"
	"math/big"
)

var isRightTruncatableHarshadNumCache = map[int64]bool{}
var maxCached int64

func sumOfDigits(n int64) (sum int64) {
	var d int64
	for n > 0 {
		d = n % 10
		n = n / 10
		sum += d
	}
	return
}

func isHarshadNum(n int64) bool {
	if isRightTruncatableHarshadNumCache[n] == true {
		return true
	}

	if n < maxCached {
		return false
	}

	is := n != 0 && (n < 10 || n%sumOfDigits(n) == 0)
	if is {
		isRightTruncatableHarshadNumCache[n] = true
		maxCached = n
	}
	return is
}

func isRightTruncatableHarshadNum(n int64) bool {
	if n == 0 {
		return false
	}
	if n < 10 {
		return true
	}

	return isHarshadNum(n) && isRightTruncatableHarshadNum(n/10)
}

func isStrongRightTruncatableHN(n int64) bool {
	return isRightTruncatableHarshadNum(n) && isPrime(n/sumOfDigits(n))
}

func isPrime(n int64) bool {
	return big.NewInt(n).ProbablyPrime(3)
}

func sumOfSRTHN(limit int64) (sum int64) {
	var number int64
	fmt.Println(limit)
	for number = 3; number < limit; number += 2 {
		if number%3 == 0 || number%5 == 0 {
			continue
		}
		if isStrongRightTruncatableHN(number/10) && isPrime(number) {
			fmt.Printf("%d\n", number)
			sum += number
		}
	}

	return
}

func main() {
	fmt.Printf("90619 ==? %d\n", sumOfSRTHN(int64(math.Pow10(10))))
}
