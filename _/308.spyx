# 2, 3, 5, 7, 11, 13, 17, 19, 23, 29

# T = [
#     [17, 91],
#     [78, 85],
#     [19, 51],
#     [23, 38],
#     [29, 33],
#     [77, 29],
#     [95, 23],
#     [77, 19],
#     [ 1, 17],
#     [11, 13],
#     [13, 11],
#     [15,  2],
#     [ 1,  7],
#     [55,  1],
# ]

# P = [2, 3, 
# def trans(x) :
#     F = []
#     state = 0
#     cnt = 0
#     for d in P :
#         c = 0
#         while x % d == 0 :
#             c += 1
#             x = x // d
#         if d > 10 :
#             state += c * (cnt - 3)
#         else :
#             F += [c]
#         cnt += 1
#     return F + [state]

# for x, y in T :
#     print "%2d" % (y), trans(y), trans(x)

# n = 2
# while n != 128 :
#     for x, y in T :
#         if n % y == 0 :
#             n = n // y * x
#             cur = y
#             break
#     print "%2d" % (cur), trans(n)

cdef int a = 1, b = 0, c = 0, d = 0, S = 0

# while (a, b, c) != (7, 0, 0) :
#     if S == 3 :
#         while c > 0 :
#             if c > d :
#                 c -= d + 1
#                 a += d + 1
#             else :
#                 d -= 1
#                 c += a
#                 a  = 0
#             print a, b, c, d
#         S  = 0
#     elif S == 0 :
#         c = a + 1
#         d = a - 1
#         a = 0
#         b = 0
#         S = 3
#     print a, b, c, d, S

ctypedef long long int64
cdef int64 T = 0
cdef int t
while True :
    if S == 3 :
        while c :
            while c > d :
                c -= (d + 1)
                a += (d + 1)
                T += (4 * d + 6)
            if c :
                T += 2 * a + 2 + 6 * c
                d -= 1
                c += a
                a  = 0
        T += 1
        S = 0
    elif S == 1 :
        T += 2 * b + 2
        d += b - 1
        S  = 3
    elif S == 0 :
        T += a + d + 1
        b  = a
        c += a + 1
        a  = 0
        d  = 0
        S  = 1
    print a, b, c, d, S
    if (a, c) == (104743, 0) :
        break

print T

# 91 [0, 0, 0, 1, 2] [0, 0, 0, 0, 3]
# 85 [0, 0, 1, 0, 3] [1, 1, 0, 0, 2]
# 51 [0, 1, 0, 0, 3] [0, 0, 0, 0, 4]
# 38 [1, 0, 0, 0, 4] [0, 0, 0, 0, 5]
# 33 [0, 1, 0, 0, 1] [0, 0, 0, 0, 6]
# 29 [0, 0, 0, 0, 6] [0, 0, 0, 1, 1]
# 23 [0, 0, 0, 0, 5] [0, 0, 1, 0, 4]
# 19 [0, 0, 0, 0, 4] [0, 0, 0, 1, 1]
# 17 [0, 0, 0, 0, 3] [0, 0, 0, 0, 0]
# 13 [0, 0, 0, 0, 2] [0, 0, 0, 0, 1]
# 11 [0, 0, 0, 0, 1] [0, 0, 0, 0, 2]
#  2 [1, 0, 0, 0, 0] [0, 1, 1, 0, 0]
#  7 [0, 0, 0, 1, 0] [0, 0, 0, 0, 0]
#  1 [0, 0, 0, 0, 0] [0, 0, 1, 0, 1]
