*******************************************************************************
Apr 11, 2021


Overview:
====================


## Library structures:
* Core
  * dpe.dll The binary that implements the main scheduling logic.
  * dpe.h The user includes this file and implements the Solver.
* Example
  * main.cc An examepl of using this library.
  * main.exe The generated example binary.
* Dependencies
  * msvcp120.dll, msvcr120.dll, zmq.dll
* Web UI on Master node
  * index.html, Chart.bundle.js, jquery.min.js are expected to the folder where dpe.dll exists.

## MasterNode:
* Initializes the solver as master and retrieves the tasks (int64). The task's status is PENDING.
  * If possible, loads the saved state: if a task's status in the cache is DONE, the cached status is copied.
* Receives GetTaskRequest from worker nodes and assigns tasks to the requestor. A task is marked as RUNNING.
* Receives FinishComputeRequest from worker nodes and the task is marked as DONE.

## WorkerNode:
* Connects to MasterNode.
* Sends GetTaskRequest to get new tasks and execute them.
* When a task is finished, sends FinishComputeRequest to save the result and Sends GetTaskRequest to get more tasks.


*******************************************************************************
Jun 12, 2017


Overview:
====================

Updated Jun 12, 2017, [history version](https://github.com/baihacker/dcfpe/blob/master/docs/design_diary.txt).

MasterNode:
* Receives connection from workers. (duplex communication connection).
* Uses a MasterTaskScheduler to maintain a task queue, schedule task to workers, handle request/connection error. SimpleMasterTaskScheduler uses a very simple strategy to schedule tasks.
* MasterTaskScheduler uses a Solver to initialize the tasks (just holds the id of task), and tell the solver when a task is finished or all the tasks are completed.

WorkerNode:
* Connects to MasterNode.
* Uses WorkerTaskExecuter to execute task. WorkerTaskExecuter will dispatch task to correct thread anc call the corresponding compute method provide by Solver.

How to use:
* Provides a lib, dll, .h and the client code can link to it.
* Support x86 and x64. (Seems it doesn't work for x64 in Release mode but it works in x64 Debug).

Other:
======

* Main language is C++11. It is possible to use python, lua, php, javascript.
* Basic network libary: ZMQ
* Worker will protect the W process. (sandbox)
* Trust mechanism between Host and Worker. (It is possible that the worker will receive a virus from Host).

*******************************************************************************
Oct 16, 2014

Changes and new ideas:
I make a brief component list in the last design. In the design, there are two
type of processes "Host" and "Worker", they connect to each other. A job contains
three type of process "H process", "W process", "R process". They form a "MapReduce"
computer framework. There two type of entities on our virtual network (overlapped
network), it is not a good design.

We have only one type of entity on the virtual network, which is called a
DPE-Service. DPE-Services connet with each other and form a virtual network.
When a user wants to start a compute job, he sends requets to available DPE-Serices.
When a DPE-Service receive the request, it accepts the request and allocates a compute
resource and send the address of the resource back to the request DPE-Service.
Now, there are several compute resources on the network and they form a compute
network. When the job finishes, the compute network dies. We can not only support
"Compute Resource", but also other resources. A resource is owned by a DPE-Service.
A resource is used by other DPE-Service. A resource has its own security management.
The owner of a resource and the resource may be on different computers.

Overrall speaking, DPE-Service looks like a virtual computer, and the computers
form a network. A computer creates and shares its resources. Compute is one of
the resources.

Does the relationship between DPE-service and a physics computer have a one-to-one
map? No. DPE-Service has two type of work mode. The first is a computer will own
at most a DPE-Serivce. The first is a computer can own two or more DPE-Service.
It does not matter. The basic node of our network is DPE-Service, we do not care
wheter two DPE-Services are on the same computer. But when we allocate resource,
we will avoid from allocating two of the same resource on the same computer.

Virtual Network:
A DPE-Service have a service which receive request from other DPE-Service and send
the reponse back(REQ-REP mode). However, they are the same as HTTP-Services except
that they can discover each other on LAN. I do want to work on the problem anymore.
Leave it in the future.

What we have is a virtual network with resource sharing.

Process Model (Details):
As I mentioned above, we have a process called DPE-Service. It server for other
DPE-Service. It is controlled by zero, one, two or more DPE-Client. A DPE-Client
may be a GUI-Application, a AcviteX Control, a NP Control, a Script. If a DPE-Service
works in a one-to-on map mode, we say the DPE-Client is the owner of the DPE-Service.
Otherwise, it is shared by the DPE-Clients and can work with zero DPE-Client.

What's the IPC pattern between DPE-Service and DPE-Client?
I think REQ-REP mode with nodifications is enough.

Network Model (Details):
A computer may be on different network. So DPE-Service can provide its service
on different network. We can config it (by configuration files) or control it
(by DPE-Client), so it will work on the network we desire.



*******************************************************************************
Sep 05, 2014


Brief Component List:
====================

Host:
* Discover workers from LAN.
* Discover workers from server.
* Add workers manual.
* Comunnicate with Worker
* Maintain the H process and R process.
* Maintain the worker list. (View Workers, Network Quality, Worker ability(memory limit, process count limitation), Worker status(Memory usage, CPU usage, process count))
* Distribute task effectively, and manage them. Reliable.
* Receive tasks from H process and distribute them to W process. (H process -> Host -> Worker -> W process)
* Receive result from W process and send them to R process. (W process -> Worker -> Host -> R process)

Worker:
* Announce it is joining or leaving the LAN.
* Register it on the server.
* Communicate with Host.
* Maintain the W process.
* Receive tasks from Worker and pass them to W process.
* Receive result from W process and send them to Host.

H process:
* Generate tasks and send to Host

W process:
* Compute and send result to Worker

R process:
* Receive results from Host and combine them.

Other:
======

* Main language is C++11. It is possible to use python, lua, php, javascript.
* Basic network libary: ZMQ
* Worker will protect the W process. (sandbox)
* Trust mechanism between Host and Worker. (It is possible that the worker will receive a virus from Host).
* I do not when to release the first version because I am very lazy.
