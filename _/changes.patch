Index: base/base.gyp
===================================================================
--- base/base.gyp	(revision 4)
+++ base/base.gyp	(working copy)
@@ -7,6 +7,7 @@
     'chromium_code': 1,
   },
   'includes': [
+    #'../build/common.gypi',
     '../build/win_precompile.gypi',
     'base.gypi',
   ],
@@ -22,9 +23,9 @@
       },
       'dependencies': [
         'base_static',
-        'allocator/allocator.gyp:allocator_extension_thunks',
-        '../testing/gtest.gyp:gtest_prod',
-        '../third_party/modp_b64/modp_b64.gyp:modp_b64',
+        #'allocator/allocator.gyp:allocator_extension_thunks',
+        #'../testing/gtest.gyp:gtest_prod',
+        #'../third_party/modp_b64/modp_b64.gyp:modp_b64',
         'third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',
       ],
       # TODO(gregoryd): direct_dependent_settings should be shared with the
@@ -62,99 +63,6 @@
             '../build/linux/system.gyp:glib',
           ],
         }],
-        ['OS == "android" and _toolset == "host"', {
-          # Always build base as a static_library for host toolset, even if
-          # we're doing a component build. Specifically, we only care about the
-          # target toolset using components since that's what developers are
-          # focusing on. In theory we should do this more generally for all
-          # targets when building for host, but getting the gyp magic
-          # per-toolset for the "component" variable is hard, and we really only
-          # need base on host.
-          'type': 'static_library',
-          # Base for host support is the minimum required to run the
-          # ssl false start blacklist tool. It requires further changes
-          # to generically support host builds (and tests).
-          # Note: when building for host, gyp has OS == "android",
-          # hence the *_android.cc files are included but the actual code
-          # doesn't have OS_ANDROID / ANDROID defined.
-          'conditions': [
-            ['host_os == "mac"', {
-              'sources/': [
-                ['exclude', '^native_library_linux\\.cc$'],
-                ['exclude', '^process_util_linux\\.cc$'],
-                ['exclude', '^sys_info_linux\\.cc$'],
-                ['exclude', '^sys_string_conversions_linux\\.cc$'],
-                ['exclude', '^worker_pool_linux\\.cc$'],
-              ],
-            }],
-          ],
-        }],
-        ['OS == "android" and _toolset == "target"', {
-          'conditions': [
-            ['target_arch == "ia32" or target_arch == "x64"', {
-              'sources/': [
-                ['include', '^atomicops_internals_x86_gcc\\.cc$'],
-              ],
-            }],
-            ['target_arch == "mipsel"', {
-              'sources/': [
-                ['include', '^atomicops_internals_mips_gcc\\.cc$'],
-              ],
-            }],
-          ],
-          'dependencies': [
-            'base_jni_headers',
-            '../third_party/ashmem/ashmem.gyp:ashmem',
-          ],
-          'link_settings': {
-            'libraries': [
-              '-llog',
-            ],
-          },
-          'sources!': [
-            'debug/stack_trace_posix.cc',
-          ],
-          'includes': [
-            '../build/android/cpufeatures.gypi',
-          ],
-        }],
-        ['OS == "android" and _toolset == "target" and android_webview_build == 0', {
-          'dependencies': [
-            'base_java',
-          ],
-        }],
-        ['os_bsd==1', {
-          'include_dirs': [
-            '/usr/local/include',
-          ],
-          'link_settings': {
-            'libraries': [
-              '-L/usr/local/lib -lexecinfo',
-            ],
-          },
-        }],
-        ['OS == "linux"', {
-          'link_settings': {
-            'libraries': [
-              # We need rt for clock_gettime().
-              '-lrt',
-              # For 'native_library_linux.cc'
-              '-ldl',
-            ],
-          },
-          'conditions': [
-            ['use_allocator!="tcmalloc"', {
-              'defines': [
-                'NO_TCMALLOC',
-              ],
-              'direct_dependent_settings': {
-                'defines': [
-                  'NO_TCMALLOC',
-                ],
-              },
-            }],
-          ],
-        }],
         ['OS == "win"', {
           # Specify delayload for base.dll.
           'msvs_settings': {
@@ -181,33 +89,7 @@
             },
           },
         }],
-        ['OS == "mac" or (OS == "ios" and _toolset == "host")', {
-          'link_settings': {
-            'libraries': [
-              '$(SDKROOT)/System/Library/Frameworks/AppKit.framework',
-              '$(SDKROOT)/System/Library/Frameworks/ApplicationServices.framework',
-              '$(SDKROOT)/System/Library/Frameworks/Carbon.framework',
-              '$(SDKROOT)/System/Library/Frameworks/CoreFoundation.framework',
-              '$(SDKROOT)/System/Library/Frameworks/Foundation.framework',
-              '$(SDKROOT)/System/Library/Frameworks/IOKit.framework',
-              '$(SDKROOT)/System/Library/Frameworks/Security.framework',
-            ],
-          },
-          'dependencies': [
-            '../third_party/mach_override/mach_override.gyp:mach_override',
-          ],
-        }],
-        ['OS == "ios" and _toolset != "host"', {
-          'link_settings': {
-            'libraries': [
-              '$(SDKROOT)/System/Library/Frameworks/CoreFoundation.framework',
-              '$(SDKROOT)/System/Library/Frameworks/CoreGraphics.framework',
-              '$(SDKROOT)/System/Library/Frameworks/CoreText.framework',
-              '$(SDKROOT)/System/Library/Frameworks/Foundation.framework',
-              '$(SDKROOT)/System/Library/Frameworks/UIKit.framework',
-            ],
-          },
-        }],
+        
         ['OS != "win" and OS != "ios"', {
             'dependencies': ['../third_party/libevent/libevent.gyp:libevent'],
         },],
@@ -253,58 +135,8 @@
         'sync_socket_posix.cc',
       ],
     },
+    
     {
-      'target_name': 'base_i18n',
-      'type': '<(component)',
-      'variables': {
-        'enable_wexit_time_destructors': 1,
-        'optimize': 'max',
-        'base_i18n_target': 1,
-      },
-      'dependencies': [
-        'base',
-        'third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',
-        '../third_party/icu/icu.gyp:icui18n',
-        '../third_party/icu/icu.gyp:icuuc',
-      ],
-      'conditions': [
-        ['OS == "win"', {
-          # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
-          'msvs_disabled_warnings': [
-            4267,
-          ],
-        }],
-        ['icu_use_data_file_flag==1', {
-          'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_FILE'],
-        }, { # else icu_use_data_file_flag !=1
-          'conditions': [
-            ['OS=="win"', {
-              'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_SHARED'],
-            }, {
-              'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC'],
-            }],
-          ],
-        }],
-      ],
-      'export_dependent_settings': [
-        'base',
-      ],
-
-
-    },
-    {
-      'target_name': 'base_message_loop_tests',
-      'type': 'static_library',
-      'dependencies': [
-        'base',
-        '../testing/gtest.gyp:gtest',
-      ],
-      'sources': [
-        'message_loop/message_loop_test.cc',
-        'message_loop/message_loop_test.h',
-      ],
-    },
-    {
       'target_name': 'base_prefs',
       'type': '<(component)',
       'variables': {
@@ -360,24 +192,6 @@
       ],
     },
     {
-      'target_name': 'base_prefs_test_support',
-      'type': 'static_library',
-      'dependencies': [
-        'base',
-        'base_prefs',
-        '../testing/gmock.gyp:gmock',
-      ],
-      'sources': [
-        'prefs/mock_pref_change_callback.cc',
-        'prefs/pref_store_observer_mock.cc',
-        'prefs/pref_store_observer_mock.h',
-        'prefs/testing_pref_service.cc',
-        'prefs/testing_pref_service.h',
-        'prefs/testing_pref_store.cc',
-        'prefs/testing_pref_store.h',
-      ],
-    },
-    {
       # This is the subset of files from base that should not be used with a
       # dynamic library. Note that this library cannot depend on base because
       # base depends on base_static.
@@ -398,808 +212,8 @@
         '..',
       ],
     },
-    # Include this target for a main() function that simply instantiates
-    # and runs a base::TestSuite.
-    {
-      'target_name': 'run_all_unittests',
-      'type': 'static_library',
-      'dependencies': [
-        'test_support_base',
-      ],
-      'sources': [
-        'test/run_all_unittests.cc',
-      ],
-    },
-    {
-      'target_name': 'base_unittests',
-      'type': '<(gtest_target_type)',
-      'sources': [
-        'android/application_status_listener_unittest.cc',
-        'android/jni_android_unittest.cc',
-        'android/jni_array_unittest.cc',
-        'android/jni_string_unittest.cc',
-        'android/path_utils_unittest.cc',
-        'android/scoped_java_ref_unittest.cc',
-        'android/sys_utils_unittest.cc',
-        'async_socket_io_handler_unittest.cc',
-        'at_exit_unittest.cc',
-        'atomicops_unittest.cc',
-        'barrier_closure_unittest.cc',
-        'base64_unittest.cc',
-        'big_endian_unittest.cc',
-        'bind_unittest.cc',
-        'bind_unittest.nc',
-        'bits_unittest.cc',
-        'build_time_unittest.cc',
-        'callback_helpers_unittest.cc',
-        'callback_list_unittest.cc',
-        'callback_list_unittest.nc',
-        'callback_unittest.cc',
-        'callback_unittest.nc',
-        'cancelable_callback_unittest.cc',
-        'command_line_unittest.cc',
-        'containers/hash_tables_unittest.cc',
-        'containers/linked_list_unittest.cc',
-        'containers/mru_cache_unittest.cc',
-        'containers/small_map_unittest.cc',
-        'containers/stack_container_unittest.cc',
-        'cpu_unittest.cc',
-        'debug/crash_logging_unittest.cc',
-        'debug/leak_tracker_unittest.cc',
-        'debug/proc_maps_linux_unittest.cc',
-        'debug/stack_trace_unittest.cc',
-        'debug/trace_event_memory_unittest.cc',
-        'debug/trace_event_synthetic_delay_unittest.cc',
-        'debug/trace_event_system_stats_monitor_unittest.cc',
-        'debug/trace_event_unittest.cc',
-        'debug/trace_event_unittest.h',
-        'debug/trace_event_win_unittest.cc',
-        'deferred_sequenced_task_runner_unittest.cc',
-        'environment_unittest.cc',
-        'file_util_unittest.cc',
-        'file_version_info_unittest.cc',
-        'files/dir_reader_posix_unittest.cc',
-        'files/file_path_unittest.cc',
-        'files/file_proxy_unittest.cc',
-        'files/file_unittest.cc',
-        'files/file_util_proxy_unittest.cc',
-        'files/important_file_writer_unittest.cc',
-        'files/scoped_temp_dir_unittest.cc',
-        'gmock_unittest.cc',
-        'guid_unittest.cc',
-        'hash_unittest.cc',
-        'id_map_unittest.cc',
-        'i18n/break_iterator_unittest.cc',
-        'i18n/char_iterator_unittest.cc',
-        'i18n/case_conversion_unittest.cc',
-        'i18n/file_util_icu_unittest.cc',
-        'i18n/icu_string_conversions_unittest.cc',
-        'i18n/number_formatting_unittest.cc',
-        'i18n/rtl_unittest.cc',
-        'i18n/streaming_utf8_validator_unittest.cc',
-        'i18n/string_search_unittest.cc',
-        'i18n/time_formatting_unittest.cc',
-        'i18n/timezone_unittest.cc',
-        'ini_parser_unittest.cc',
-        'ios/device_util_unittest.mm',
-        'json/json_parser_unittest.cc',
-        'json/json_reader_unittest.cc',
-        'json/json_value_converter_unittest.cc',
-        'json/json_value_serializer_unittest.cc',
-        'json/json_writer_unittest.cc',
-        'json/string_escape_unittest.cc',
-        'lazy_instance_unittest.cc',
-        'logging_unittest.cc',
-        'mac/bind_objc_block_unittest.mm',
-        'mac/foundation_util_unittest.mm',
-        'mac/libdispatch_task_runner_unittest.cc',
-        'mac/mac_util_unittest.mm',
-        'mac/objc_property_releaser_unittest.mm',
-        'mac/scoped_nsobject_unittest.mm',
-        'mac/scoped_sending_event_unittest.mm',
-        'md5_unittest.cc',
-        'memory/aligned_memory_unittest.cc',
-        'memory/discardable_memory_manager_unittest.cc',
-        'memory/discardable_memory_unittest.cc',
-        'memory/linked_ptr_unittest.cc',
-        'memory/ref_counted_memory_unittest.cc',
-        'memory/ref_counted_unittest.cc',
-        'memory/scoped_ptr_unittest.cc',
-        'memory/scoped_ptr_unittest.nc',
-        'memory/scoped_vector_unittest.cc',
-        'memory/shared_memory_unittest.cc',
-        'memory/singleton_unittest.cc',
-        'memory/weak_ptr_unittest.cc',
-        'memory/weak_ptr_unittest.nc',
-        'message_loop/message_loop_proxy_impl_unittest.cc',
-        'message_loop/message_loop_proxy_unittest.cc',
-        'message_loop/message_loop_unittest.cc',
-        'message_loop/message_pump_glib_unittest.cc',
-        'message_loop/message_pump_io_ios_unittest.cc',
-        'message_loop/message_pump_libevent_unittest.cc',
-        'metrics/sample_map_unittest.cc',
-        'metrics/sample_vector_unittest.cc',
-        'metrics/bucket_ranges_unittest.cc',
-        'metrics/field_trial_unittest.cc',
-        'metrics/histogram_base_unittest.cc',
-        'metrics/histogram_delta_serialization_unittest.cc',
-        'metrics/histogram_snapshot_manager_unittest.cc',
-        'metrics/histogram_unittest.cc',
-        'metrics/sparse_histogram_unittest.cc',
-        'metrics/stats_table_unittest.cc',
-        'metrics/statistics_recorder_unittest.cc',
-        'observer_list_unittest.cc',
-        'os_compat_android_unittest.cc',
-        'path_service_unittest.cc',
-        'pickle_unittest.cc',
-        'platform_file_unittest.cc',
-        'posix/file_descriptor_shuffle_unittest.cc',
-        'posix/unix_domain_socket_linux_unittest.cc',
-        'power_monitor/power_monitor_unittest.cc',
-        'prefs/default_pref_store_unittest.cc',
-        'prefs/json_pref_store_unittest.cc',
-        'prefs/mock_pref_change_callback.h',
-        'prefs/overlay_user_pref_store_unittest.cc',
-        'prefs/pref_change_registrar_unittest.cc',
-        'prefs/pref_member_unittest.cc',
-        'prefs/pref_notifier_impl_unittest.cc',
-        'prefs/pref_service_unittest.cc',
-        'prefs/pref_value_map_unittest.cc',
-        'prefs/pref_value_store_unittest.cc',
-        'prefs/scoped_user_pref_update_unittest.cc',
-        'process/memory_unittest.cc',
-        'process/memory_unittest_mac.h',
-        'process/memory_unittest_mac.mm',
-        'process/process_metrics_unittest.cc',
-        'process/process_metrics_unittest_ios.cc',
-        'process/process_util_unittest.cc',
-        'profiler/tracked_time_unittest.cc',
-        'rand_util_unittest.cc',
-        'numerics/safe_numerics_unittest.cc',
-        'scoped_clear_errno_unittest.cc',
-        'scoped_generic_unittest.cc',
-        'scoped_native_library_unittest.cc',
-        'scoped_observer.h',
-        'security_unittest.cc',
-        'sequence_checker_unittest.cc',
-        'sha1_unittest.cc',
-        'stl_util_unittest.cc',
-        'strings/nullable_string16_unittest.cc',
-        'strings/safe_sprintf_unittest.cc',
-        'strings/string16_unittest.cc',
-        'strings/stringprintf_unittest.cc',
-        'strings/string_number_conversions_unittest.cc',
-        'strings/string_piece_unittest.cc',
-        'strings/string_split_unittest.cc',
-        'strings/string_tokenizer_unittest.cc',
-        'strings/string_util_unittest.cc',
-        'strings/stringize_macros_unittest.cc',
-        'strings/sys_string_conversions_mac_unittest.mm',
-        'strings/sys_string_conversions_unittest.cc',
-        'strings/utf_offset_string_conversions_unittest.cc',
-        'strings/utf_string_conversions_unittest.cc',
-        'supports_user_data_unittest.cc',
-        'sync_socket_unittest.cc',
-        'synchronization/cancellation_flag_unittest.cc',
-        'synchronization/condition_variable_unittest.cc',
-        'synchronization/lock_unittest.cc',
-        'synchronization/waitable_event_unittest.cc',
-        'synchronization/waitable_event_watcher_unittest.cc',
-        'sys_info_unittest.cc',
-        'system_monitor/system_monitor_unittest.cc',
-        'task/cancelable_task_tracker_unittest.cc',
-        'task_runner_util_unittest.cc',
-        'template_util_unittest.cc',
-        'test/expectations/expectation_unittest.cc',
-        'test/expectations/parser_unittest.cc',
-        'test/statistics_delta_reader_unittest.cc',
-        'test/test_reg_util_win_unittest.cc',
-        'test/trace_event_analyzer_unittest.cc',
-        'threading/non_thread_safe_unittest.cc',
-        'threading/platform_thread_unittest.cc',
-        'threading/sequenced_worker_pool_unittest.cc',
-        'threading/simple_thread_unittest.cc',
-        'threading/thread_checker_unittest.cc',
-        'threading/thread_collision_warner_unittest.cc',
-        'threading/thread_id_name_manager_unittest.cc',
-        'threading/thread_local_storage_unittest.cc',
-        'threading/thread_local_unittest.cc',
-        'threading/thread_unittest.cc',
-        'threading/watchdog_unittest.cc',
-        'threading/worker_pool_posix_unittest.cc',
-        'threading/worker_pool_unittest.cc',
-        'time/pr_time_unittest.cc',
-        'time/time_unittest.cc',
-        'time/time_win_unittest.cc',
-        'timer/hi_res_timer_manager_unittest.cc',
-        'timer/mock_timer_unittest.cc',
-        'timer/timer_unittest.cc',
-        'tools_sanity_unittest.cc',
-        'tracked_objects_unittest.cc',
-        'tuple_unittest.cc',
-        'values_unittest.cc',
-        'version_unittest.cc',
-        'vlog_unittest.cc',
-        'win/dllmain.cc',
-        'win/enum_variant_unittest.cc',
-        'win/event_trace_consumer_unittest.cc',
-        'win/event_trace_controller_unittest.cc',
-        'win/event_trace_provider_unittest.cc',
-        'win/i18n_unittest.cc',
-        'win/iunknown_impl_unittest.cc',
-        'win/message_window_unittest.cc',
-        'win/object_watcher_unittest.cc',
-        'win/pe_image_unittest.cc',
-        'win/registry_unittest.cc',
-        'win/scoped_bstr_unittest.cc',
-        'win/scoped_comptr_unittest.cc',
-        'win/scoped_process_information_unittest.cc',
-        'win/scoped_variant_unittest.cc',
-        'win/shortcut_unittest.cc',
-        'win/startup_information_unittest.cc',
-        'win/win_util_unittest.cc',
-        'win/wrapped_window_proc_unittest.cc',
-      ],
-      'dependencies': [
-        'base',
-        'base_i18n',
-        'base_message_loop_tests',
-        'base_prefs',
-        'base_prefs_test_support',
-        'base_static',
-        'run_all_unittests',
-        'test_support_base',
-        'third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',
-        '../testing/gmock.gyp:gmock',
-        '../testing/gtest.gyp:gtest',
-        '../third_party/icu/icu.gyp:icui18n',
-        '../third_party/icu/icu.gyp:icuuc',
-      ],
-      'includes': ['../build/nocompile.gypi'],
-      'variables': {
-         # TODO(ajwong): Is there a way to autodetect this?
-        'module_dir': 'base'
-      },
-      'conditions': [
-        ['OS == "android"', {
-          'dependencies': [
-            'android/jni_generator/jni_generator.gyp:jni_generator_tests',
-            '../testing/android/native_test.gyp:native_test_native_code',
-          ],
-        }],
-        ['OS == "ios" and _toolset != "host"', {
-          'sources/': [
-            # Only test the iOS-meaningful portion of process_utils.
-            ['exclude', '^process/memory_unittest'],
-            ['exclude', '^process/process_util_unittest\\.cc$'],
-            ['include', '^process/process_util_unittest_ios\\.cc$'],
-            # Requires spawning processes.
-            ['exclude', '^metrics/stats_table_unittest\\.cc$'],
-            # iOS does not use message_pump_libevent.
-            ['exclude', '^message_loop/message_pump_libevent_unittest\\.cc$'],
-          ],
-          'actions': [
-            {
-              'action_name': 'copy_test_data',
-              'variables': {
-                'test_data_files': [
-                  'test/data',
-                ],
-                'test_data_prefix': 'base',
-              },
-              'includes': [ '../build/copy_test_data_ios.gypi' ],
-            },
-          ],
-        }],
-        ['desktop_linux == 1 or chromeos == 1', {
-          'defines': [
-            'USE_SYMBOLIZE',
-          ],
-          'sources!': [
-            'file_version_info_unittest.cc',
-          ],
-          'conditions': [
-            [ 'desktop_linux==1', {
-              'sources': [
-                'nix/xdg_util_unittest.cc',
-              ],
-            }],
-          ],
-        }],
-        ['use_glib == 1', {
-          'dependencies': [
-            '../build/linux/system.gyp:glib',
-          ],
-        }, {  # use_glib == 0
-          'sources!': [
-            'message_loop/message_pump_glib_unittest.cc',
-          ]
-        }],
-        ['use_ozone == 1', {
-          'sources!': [
-            'message_loop/message_pump_glib_unittest.cc',
-          ]
-        }],
-        ['OS == "linux" and use_allocator!="none"', {
-            'dependencies': [
-              'allocator/allocator.gyp:allocator',
-            ],
-          },
-        ],
-        ['OS == "win"', {
-          'sources!': [
-            'file_descriptor_shuffle_unittest.cc',
-            'files/dir_reader_posix_unittest.cc',
-            'threading/worker_pool_posix_unittest.cc',
-            'message_loop/message_pump_libevent_unittest.cc',
-          ],
-          # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
-          'msvs_disabled_warnings': [
-            4267,
-          ],
-          'conditions': [
-            # This is needed so base_unittests uses the allocator shim, as
-            # SecurityTest.MemoryAllocationRestriction* tests are dependent
-            # on tcmalloc.
-            # TODO(wfh): crbug.com/246278 Move tcmalloc specific tests into
-            # their own test suite.
-            ['win_use_allocator_shim==1', {
-              'dependencies': [
-                'allocator/allocator.gyp:allocator',
-              ],
-            }],
-            ['icu_use_data_file_flag==0', {
-              # This is needed to trigger the dll copy step on windows.
-              # TODO(mark): This should not be necessary.
-              'dependencies': [
-                '../third_party/icu/icu.gyp:icudata',
-              ],
-            }],
-          ],
-        }, {  # OS != "win"
-          'dependencies': [
-            '../third_party/libevent/libevent.gyp:libevent'
-          ],
-        }],
-      ],  # conditions
-      'target_conditions': [
-        ['OS == "ios" and _toolset != "host"', {
-          'sources/': [
-            # Pull in specific Mac files for iOS (which have been filtered out
-            # by file name rules).
-            ['include', '^mac/bind_objc_block_unittest\\.mm$'],
-            ['include', '^mac/foundation_util_unittest\\.mm$',],
-            ['include', '^mac/objc_property_releaser_unittest\\.mm$'],
-            ['include', '^mac/scoped_nsobject_unittest\\.mm$'],
-            ['include', '^sys_string_conversions_mac_unittest\\.mm$'],
-          ],
-        }],
-        ['OS == "android" and _toolset == "target"', {
-          'sources': [
-            'memory/discardable_memory_ashmem_allocator_unittest.cc',
-          ],
-        }],
-        ['OS == "android"', {
-          'sources/': [
-            ['include', '^debug/proc_maps_linux_unittest\\.cc$'],
-          ],
-        }],
-      ],  # target_conditions
-    },
-    {
-      'target_name': 'base_perftests',
-      'type': '<(gtest_target_type)',
-      'dependencies': [
-        'base',
-        'test_support_base',
-        '../testing/gtest.gyp:gtest',
-      ],
-      'sources': [
-        'threading/thread_perftest.cc',
-        'test/run_all_unittests.cc',
-        '../testing/perf/perf_test.cc'
-      ],
-      'conditions': [
-        ['OS == "android"', {
-          'dependencies': [
-            '../testing/android/native_test.gyp:native_test_native_code',
-          ],
-        }],
-      ],
-    },
-    {
-      'target_name': 'base_i18n_perftests',
-      'type': '<(gtest_target_type)',
-      'dependencies': [
-        'test_support_base',
-        'test_support_perf',
-        '../testing/gtest.gyp:gtest',
-        'base_i18n',
-        'base',
-      ],
-      'sources': [
-        'i18n/streaming_utf8_validator_perftest.cc',
-      ],
-    },
-    {
-      'target_name': 'test_support_base',
-      'type': 'static_library',
-      'dependencies': [
-        'base',
-        'base_static',
-        'base_i18n',
-        '../testing/gmock.gyp:gmock',
-        '../testing/gtest.gyp:gtest',
-        '../third_party/libxml/libxml.gyp:libxml',
-        'third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations',
-      ],
-      'export_dependent_settings': [
-        'base',
-      ],
-      'conditions': [
-        ['os_posix==0', {
-          'sources!': [
-            'test/scoped_locale.cc',
-            'test/scoped_locale.h',
-          ],
-        }],
-        ['os_bsd==1', {
-          'sources!': [
-            'test/test_file_util_linux.cc',
-          ],
-        }],
-        ['OS == "android"', {
-          'dependencies': [
-            'base_unittests_jni_headers',
-            'base_java_unittest_support',
-          ],
-        }],
-      ],
-      'sources': [
-        'test/expectations/expectation.cc',
-        'test/expectations/expectation.h',
-        'test/expectations/parser.cc',
-        'test/expectations/parser.h',
-        'test/gtest_xml_util.cc',
-        'test/gtest_xml_util.h',
-        'test/launcher/test_launcher.cc',
-        'test/launcher/test_launcher.h',
-        'test/launcher/test_result.cc',
-        'test/launcher/test_result.h',
-        'test/launcher/test_results_tracker.cc',
-        'test/launcher/test_results_tracker.h',
-        'test/launcher/unit_test_launcher.cc',
-        'test/launcher/unit_test_launcher.h',
-        'test/launcher/unit_test_launcher_ios.cc',
-        'test/mock_chrome_application_mac.h',
-        'test/mock_chrome_application_mac.mm',
-        'test/mock_devices_changed_observer.cc',
-        'test/mock_devices_changed_observer.h',
-        'test/mock_time_provider.cc',
-        'test/mock_time_provider.h',
-        'test/multiprocess_test.cc',
-        'test/multiprocess_test.h',
-        'test/multiprocess_test_android.cc',
-        'test/null_task_runner.cc',
-        'test/null_task_runner.h',
-        'test/perf_log.cc',
-        'test/perf_log.h',
-        'test/perf_test_suite.cc',
-        'test/perf_test_suite.h',
-        'test/perf_time_logger.cc',
-        'test/perf_time_logger.h',
-        'test/power_monitor_test_base.cc',
-        'test/power_monitor_test_base.h',
-        'test/scoped_locale.cc',
-        'test/scoped_locale.h',
-        'test/scoped_path_override.cc',
-        'test/scoped_path_override.h',
-        'test/sequenced_task_runner_test_template.cc',
-        'test/sequenced_task_runner_test_template.h',
-        'test/sequenced_worker_pool_owner.cc',
-        'test/sequenced_worker_pool_owner.h',
-        'test/simple_test_clock.cc',
-        'test/simple_test_clock.h',
-        'test/simple_test_tick_clock.cc',
-        'test/simple_test_tick_clock.h',
-        'test/statistics_delta_reader.cc',
-        'test/statistics_delta_reader.h',
-        'test/task_runner_test_template.cc',
-        'test/task_runner_test_template.h',
-        'test/test_file_util.cc',
-        'test/test_file_util.h',
-        'test/test_file_util_android.cc',
-        'test/test_file_util_linux.cc',
-        'test/test_file_util_mac.cc',
-        'test/test_file_util_posix.cc',
-        'test/test_file_util_win.cc',
-        'test/test_listener_ios.h',
-        'test/test_listener_ios.mm',
-        'test/test_pending_task.cc',
-        'test/test_pending_task.h',
-        'test/test_process_killer_win.cc',
-        'test/test_process_killer_win.h',
-        'test/test_reg_util_win.cc',
-        'test/test_reg_util_win.h',
-        'test/test_shortcut_win.cc',
-        'test/test_shortcut_win.h',
-        'test/test_simple_task_runner.cc',
-        'test/test_simple_task_runner.h',
-        'test/test_suite.cc',
-        'test/test_suite.h',
-        'test/test_support_android.cc',
-        'test/test_support_android.h',
-        'test/test_support_ios.h',
-        'test/test_support_ios.mm',
-        'test/test_switches.cc',
-        'test/test_switches.h',
-        'test/test_timeouts.cc',
-        'test/test_timeouts.h',
-        'test/thread_test_helper.cc',
-        'test/thread_test_helper.h',
-        'test/trace_event_analyzer.cc',
-        'test/trace_event_analyzer.h',
-        'test/values_test_util.cc',
-        'test/values_test_util.h',
-      ],
-      'target_conditions': [
-        ['OS == "ios"', {
-          'sources/': [
-            # Pull in specific Mac files for iOS (which have been filtered out
-            # by file name rules).
-            ['include', '^test/test_file_util_mac\\.cc$'],
-          ],
-          'sources!': [
-            # iOS uses its own unit test launcher.
-            'test/launcher/unit_test_launcher.cc',
-          ],
-        }],
-      ],  # target_conditions
-    },
-    {
-      'target_name': 'test_support_perf',
-      'type': 'static_library',
-      'dependencies': [
-        'base',
-        'test_support_base',
-        '../testing/gtest.gyp:gtest',
-      ],
-      'sources': [
-        'test/run_all_perftests.cc',
-      ],
-      'direct_dependent_settings': {
-        'defines': [
-          'PERF_TEST',
-        ],
-      },
-    },
-    {
-      'target_name': 'sanitizer_options',
-      'type': 'static_library',
-      'toolsets': ['host', 'target'],
-      'variables': {
-         # Every target is going to depend on sanitizer_options, so allow
-         # this one to depend on itself.
-         'prune_self_dependency': 1,
-         # Do not let 'none' targets depend on this one, they don't need to.
-         'link_dependency': 1,
-       },
-      'sources': [
-        'debug/sanitizer_options.cc',
-      ],
-      'include_dirs': [
-        '..',
-      ],
-      # Some targets may want to opt-out from ASan, TSan and MSan and link
-      # without the corresponding runtime libraries. We drop the libc++
-      # dependency and omit the compiler flags to avoid bringing instrumented
-      # code to those targets.
-      'conditions': [
-        ['use_custom_libcxx==1', {
-          'dependencies!': [
-            '../third_party/libc++/libc++.gyp:libcxx_proxy',
-          ],
-        }],
-        ['tsan==1', {
-          'sources': [
-            'debug/tsan_suppressions.cc',
-          ],
-        }],
-      ],
-      'cflags!': [
-        '-fsanitize=address',
-        '-fsanitize=thread',
-        '-fsanitize=memory',
-        '-fsanitize-memory-track-origins',
-      ],
-      'direct_dependent_settings': {
-        'ldflags': [
-          '-Wl,-u_sanitizer_options_link_helper',
-        ],
-      },
-    },
   ],
-  'conditions': [
-    ['OS!="ios"', {
-      'targets': [
-        {
-          'target_name': 'check_example',
-          'type': 'executable',
-          'sources': [
-            'check_example.cc',
-          ],
-          'dependencies': [
-            'base',
-          ],
-        },
-        {
-          'target_name': 'build_utf8_validator_tables',
-          'type': 'executable',
-          'toolsets': ['host'],
-          'dependencies': [
-            'base',
-            '../third_party/icu/icu.gyp:icuuc',
-          ],
-          'sources': [
-            'i18n/build_utf8_validator_tables.cc'
-          ],
-        },
-      ],
-    }],
-    ['OS == "win" and target_arch=="ia32"', {
-      'targets': [
-        # The base_win64 target here allows us to use base for Win64 targets
-        # (the normal build is 32 bits).
-        {
-          'target_name': 'base_win64',
-          'type': '<(component)',
-          'variables': {
-            'base_target': 1,
-          },
-          'dependencies': [
-            'base_static_win64',
-            'allocator/allocator.gyp:allocator_extension_thunks_win64',
-            '../third_party/modp_b64/modp_b64.gyp:modp_b64_win64',
-            'third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations_win64',
-          ],
-          # TODO(gregoryd): direct_dependent_settings should be shared with the
-          # 32-bit target, but it doesn't work due to a bug in gyp
-          'direct_dependent_settings': {
-            'include_dirs': [
-              '..',
-            ],
-          },
-          'defines': [
-            'BASE_WIN64',
-            '<@(nacl_win64_defines)',
-          ],
-          'configurations': {
-            'Common_Base': {
-              'msvs_target_platform': 'x64',
-            },
-          },
-          'conditions': [
-            ['component == "shared_library"', {
-              'sources!': [
-                'debug/debug_on_start_win.cc',
-              ],
-            }],
-          ],
-          # Specify delayload for base_win64.dll.
-          'msvs_settings': {
-            'VCLinkerTool': {
-              'DelayLoadDLLs': [
-                'powrprof.dll',
-              ],
-              'AdditionalDependencies': [
-                'powrprof.lib',
-              ],
-            },
-          },
-          # Specify delayload for components that link with base_win64.lib.
-          'all_dependent_settings': {
-            'msvs_settings': {
-              'VCLinkerTool': {
-                'DelayLoadDLLs': [
-                  'powrprof.dll',
-                ],
-                'AdditionalDependencies': [
-                  'powrprof.lib',
-                ],
-              },
-            },
-          },
-          # TODO(rvargas): Bug 78117. Remove this.
-          'msvs_disabled_warnings': [
-            4244,
-            4996,
-            4267,
-          ],
-          'sources': [
-            'third_party/xdg_user_dirs/xdg_user_dir_lookup.cc',
-            'third_party/xdg_user_dirs/xdg_user_dir_lookup.h',
-            'async_socket_io_handler.h',
-            'async_socket_io_handler_posix.cc',
-            'async_socket_io_handler_win.cc',
-            'auto_reset.h',
-            'event_recorder.h',
-            'event_recorder_stubs.cc',
-            'event_recorder_win.cc',
-            'linux_util.cc',
-            'linux_util.h',
-            'md5.cc',
-            'md5.h',
-            'message_loop/message_pump_observer.h',
-            'message_loop/message_pump_libevent.cc',
-            'message_loop/message_pump_libevent.h',
-            'metrics/field_trial.cc',
-            'metrics/field_trial.h',
-            'posix/file_descriptor_shuffle.cc',
-            'posix/file_descriptor_shuffle.h',
-            'sync_socket.h',
-            'sync_socket_win.cc',
-            'sync_socket_posix.cc',
-          ],
-        },
-        {
-          'target_name': 'base_i18n_nacl_win64',
-          'type': '<(component)',
-          # TODO(gregoryd): direct_dependent_settings should be shared with the
-          # 32-bit target, but it doesn't work due to a bug in gyp
-          'direct_dependent_settings': {
-            'include_dirs': [
-              '..',
-            ],
-          },
-          'defines': [
-            '<@(nacl_win64_defines)',
-            'BASE_I18N_IMPLEMENTATION',
-          ],
-          'include_dirs': [
-            '..',
-          ],
-          'sources': [
-            'i18n/icu_util_nacl_win64.cc',
-          ],
-          'configurations': {
-            'Common_Base': {
-              'msvs_target_platform': 'x64',
-            },
-          },
-        },
-        {
-          # TODO(rvargas): Remove this when gyp finally supports a clean model.
-          # See bug 36232.
-          'target_name': 'base_static_win64',
-          'type': 'static_library',
-          'sources': [
-            'base_switches.cc',
-            'base_switches.h',
-            'win/pe_image.cc',
-            'win/pe_image.h',
-          ],
-          'sources!': [
-            # base64.cc depends on modp_b64.
-            'base64.cc',
-          ],
-          'include_dirs': [
-            '..',
-          ],
-          'configurations': {
-            'Common_Base': {
-              'msvs_target_platform': 'x64',
-            },
-          },
-          'defines': [
-            '<@(nacl_win64_defines)',
-          ],
-          # TODO(rvargas): Bug 78117. Remove this.
-          'msvs_disabled_warnings': [
-            4244,
-          ],
-        },
-      ],
-    }],
+  'conditions':[
     ['os_posix==1 and OS!="mac" and OS!="ios"', {
       'targets': [
         {
@@ -1271,237 +285,5 @@
         },
       ],
     }],
-    ['OS == "android"', {
-      'targets': [
-        {
-          'target_name': 'base_jni_headers',
-          'type': 'none',
-          'sources': [
-            'android/java/src/org/chromium/base/ApplicationStatus.java',
-            'android/java/src/org/chromium/base/BuildInfo.java',
-            'android/java/src/org/chromium/base/CommandLine.java',
-            'android/java/src/org/chromium/base/ContentUriUtils.java',
-            'android/java/src/org/chromium/base/CpuFeatures.java',
-            'android/java/src/org/chromium/base/EventLog.java',
-            'android/java/src/org/chromium/base/ImportantFileWriterAndroid.java',
-            'android/java/src/org/chromium/base/library_loader/LibraryLoader.java',
-            'android/java/src/org/chromium/base/MemoryPressureListener.java',
-            'android/java/src/org/chromium/base/JavaHandlerThread.java',
-            'android/java/src/org/chromium/base/PathService.java',
-            'android/java/src/org/chromium/base/PathUtils.java',
-            'android/java/src/org/chromium/base/PowerMonitor.java',
-            'android/java/src/org/chromium/base/SystemMessageHandler.java',
-            'android/java/src/org/chromium/base/SysUtils.java',
-            'android/java/src/org/chromium/base/ThreadUtils.java',
-            'android/java/src/org/chromium/base/TraceEvent.java',
-          ],
-          'variables': {
-            'jni_gen_package': 'base',
-          },
-          'includes': [ '../build/jni_generator.gypi' ],
-        },
-        {
-          'target_name': 'base_unittests_jni_headers',
-          'type': 'none',
-          'sources': [
-            'test/android/java/src/org/chromium/base/ContentUriTestUtils.java',
-          ],
-          'variables': {
-            'jni_gen_package': 'base',
-          },
-          'includes': [ '../build/jni_generator.gypi' ],
-        },
-        {
-          'target_name': 'base_native_libraries_gen',
-          'type': 'none',
-          'sources': [
-            'android/java/templates/NativeLibraries.template',
-          ],
-          'variables': {
-            'package_name': 'org/chromium/base/library_loader',
-            'include_path': 'android/java/templates',
-            'template_deps': [
-              'android/java/templates/native_libraries_array.h'
-            ],
-          },
-          'includes': [ '../build/android/java_cpp_template.gypi' ],
-        },
-        {
-          'target_name': 'base_java',
-          'type': 'none',
-          'variables': {
-            'java_in_dir': '../base/android/java',
-            'jar_excluded_classes': [ '*/NativeLibraries.class' ],
-          },
-          'dependencies': [
-            'base_java_application_state',
-            'base_java_memory_pressure_level_list',
-            'base_native_libraries_gen',
-          ],
-          'includes': [ '../build/java.gypi' ],
-          'conditions': [
-            ['android_webview_build==0', {
-              'dependencies': [
-                '../third_party/jsr-305/jsr-305.gyp:jsr_305_javalib',
-              ],
-            }]
-          ],
-        },
-        {
-          'target_name': 'base_java_unittest_support',
-          'type': 'none',
-          'dependencies': [
-            'base_java',
-          ],
-          'variables': {
-            'java_in_dir': '../base/test/android/java',
-          },
-          'includes': [ '../build/java.gypi' ],
-        },
-        {
-          'target_name': 'base_java_application_state',
-          'type': 'none',
-          # This target is used to auto-generate ApplicationState.java
-          # from a template file. The source file contains a list of
-          # Java constant declarations matching the ones in
-          # android/application_state_list.h.
-          'sources': [
-            'android/java/src/org/chromium/base/ApplicationState.template',
-          ],
-          'variables': {
-            'package_name': 'org/chromium/base',
-            'template_deps': ['android/application_state_list.h'],
-          },
-          'includes': [ '../build/android/java_cpp_template.gypi' ],
-        },
-        {
-          'target_name': 'base_java_memory_pressure_level_list',
-          'type': 'none',
-          'sources': [
-            'android/java/src/org/chromium/base/MemoryPressureLevelList.template',
-          ],
-          'variables': {
-            'package_name': 'org/chromium/base',
-            'template_deps': ['memory/memory_pressure_level_list.h'],
-          },
-          'includes': [ '../build/android/java_cpp_template.gypi' ],
-        },
-        {
-          'target_name': 'base_java_test_support',
-          'type': 'none',
-          'dependencies': [
-            'base_java',
-          ],
-          'variables': {
-            'java_in_dir': '../base/test/android/javatests',
-          },
-          'includes': [ '../build/java.gypi' ],
-        },
-        {
-          'target_name': 'base_javatests',
-          'type': 'none',
-          'dependencies': [
-            'base_java',
-            'base_java_test_support',
-          ],
-          'variables': {
-            'java_in_dir': '../base/android/javatests',
-          },
-          'includes': [ '../build/java.gypi' ],
-        },
-        {
-          'target_name': 'chromium_android_linker',
-          'type': 'shared_library',
-          'conditions': [
-            ['android_webview_build == 0 and target_arch != "x64" and \
-               target_arch != "arm64"', {
-              # Avoid breaking the webview/64-bit build because they
-              # don't have <(android_ndk_root)/crazy_linker.gyp.
-              # Note that webview never uses the linker anyway.
-              # Note there is no 64-bit support in the linker.
-              'sources': [
-                'android/linker/linker_jni.cc',
-              ],
-              # The crazy linker is never instrumented.
-              'cflags!': [
-                '-finstrument-functions',
-              ],
-              'dependencies': [
-                # The NDK contains the crazy_linker here:
-                #   '<(android_ndk_root)/crazy_linker.gyp:crazy_linker'
-                # However, we use our own fork.  See bug 384700.
-                '../third_party/android_crazy_linker/crazy_linker.gyp:crazy_linker',
-              ],
-            }],
-          ],
-        },
-
-      ],
-    }],
-    ['OS == "android"', {
-      'targets': [
-        {
-          'target_name': 'base_perftests_apk',
-          'type': 'none',
-          'dependencies': [
-            'base_perftests',
-          ],
-          'variables': {
-            'test_suite_name': 'base_perftests',
-          },
-          'includes': [ '../build/apk_test.gypi' ],
-        },
-      ],
-    }],
-    ['OS == "win"', {
-      'targets': [
-        {
-          'target_name': 'debug_message',
-          'type': 'executable',
-          'sources': [
-            'debug_message.cc',
-          ],
-          'msvs_settings': {
-            'VCLinkerTool': {
-              'SubSystem': '2',         # Set /SUBSYSTEM:WINDOWS
-            },
-          },
-        },
-      ],
-    }],
-    ['OS == "android"', {
-      'targets': [
-        {
-          'target_name': 'base_unittests_apk',
-          'type': 'none',
-          'dependencies': [
-            'base_java',
-            'base_unittests',
-          ],
-          'variables': {
-            'test_suite_name': 'base_unittests',
-          },
-          'includes': [ '../build/apk_test.gypi' ],
-        },
-      ],
-    }],
-    ['test_isolation_mode != "noop"', {
-      'targets': [
-        {
-          'target_name': 'base_unittests_run',
-          'type': 'none',
-          'dependencies': [
-            'base_unittests',
-          ],
-          'includes': [
-            '../build/isolate.gypi',
-            'base_unittests.isolate',
-          ],
-          'sources': [
-            'base_unittests.isolate',
-          ],
-        },
-      ],
-    }],
-  ],
+  ]
 }
Index: base/base.gypi
===================================================================
--- base/base.gypi	(revision 4)
+++ base/base.gypi	(working copy)
@@ -22,8 +22,8 @@
           'third_party/nspr/prtime.h',
           'third_party/superfasthash/superfasthash.c',
           'third_party/xdg_mime/xdgmime.h',
-          'allocator/allocator_extension.cc',
-          'allocator/allocator_extension.h',
+          #'allocator/allocator_extension.cc',
+          #'allocator/allocator_extension.h',
           'allocator/type_profiler_control.cc',
           'allocator/type_profiler_control.h',
           'android/application_status_listener.cc',
@@ -83,8 +83,8 @@
           'atomicops_internals_x86_msvc.h',
           'barrier_closure.cc',
           'barrier_closure.h',
-          'base64.cc',
-          'base64.h',
+          #'base64.cc',
+          #'base64.h',
           'base_export.h',
           'base_paths.cc',
           'base_paths.h',
@@ -750,40 +750,6 @@
               ],
             },
           ],
-          ['>(nacl_untrusted_build)==1', {
-            'sources!': [
-               'allocator/type_profiler_control.cc',
-               'allocator/type_profiler_control.h',
-               'base_paths.cc',
-               'cpu.cc',
-               'debug/stack_trace_posix.cc',
-               'file_util.cc',
-               'file_util_posix.cc',
-               'files/file_enumerator_posix.cc',
-               'files/file_path_watcher_fsevents.cc',
-               'files/file_path_watcher_fsevents.h',
-               'files/file_path_watcher_kqueue.cc',
-               'files/file_path_watcher_kqueue.h',
-               'files/file_proxy.cc',
-               'files/file_util_proxy.cc',
-               'memory/shared_memory_posix.cc',
-               'native_library_posix.cc',
-               'path_service.cc',
-               'posix/unix_domain_socket_linux.cc',
-               'process/kill_posix.cc',
-               'process/launch_posix.cc',
-               'process/process_metrics_posix.cc',
-               'process/process_posix.cc',
-               'rand_util_posix.cc',
-               'scoped_native_library.cc',
-               'files/scoped_temp_dir.cc',
-               'sys_info_posix.cc',
-               'third_party/dynamic_annotations/dynamic_annotations.c',
-            ],
-            'sources/': [
-              ['include', '^threading/platform_thread_linux\\.cc$'],
-            ],
-          }],
           ['OS == "android" and _toolset == "target" and >(nacl_untrusted_build)==0', {
            'sources': [
              'memory/discardable_memory_ashmem_allocator.cc',
@@ -792,100 +758,7 @@
              'memory/discardable_memory_ashmem.h',
            ],
           }],
-          ['OS == "android" and >(nacl_untrusted_build)==0', {
-            'sources!': [
-              'base_paths_posix.cc',
-              'files/file_path_watcher_fsevents.cc',
-              'files/file_path_watcher_fsevents.h',
-              'files/file_path_watcher_kqueue.cc',
-              'files/file_path_watcher_kqueue.h',
-              'files/file_path_watcher_stub.cc',
-              'power_monitor/power_monitor_device_source_posix.cc',
-            ],
-            'sources/': [
-              ['include', '^debug/proc_maps_linux\\.cc$'],
-              ['include', '^files/file_path_watcher_linux\\.cc$'],
-              ['include', '^process/memory_linux\\.cc$'],
-              ['include', '^process/internal_linux\\.cc$'],
-              ['include', '^process/process_handle_linux\\.cc$'],
-              ['include', '^process/process_iterator\\.cc$'],
-              ['include', '^process/process_iterator_linux\\.cc$'],
-              ['include', '^process/process_metrics_linux\\.cc$'],
-              ['include', '^posix/unix_domain_socket_linux\\.cc$'],
-              ['include', '^strings/sys_string_conversions_posix\\.cc$'],
-              ['include', '^sys_info_linux\\.cc$'],
-              ['include', '^worker_pool_linux\\.cc$'],
-            ],
-          }],
-          ['OS == "android" and _toolset == "host" and host_os == "linux"', {
-            'defines': [
-              'OS_ANDROID_HOST=Linux',
-            ],
-            'sources/': [
-              # Pull in specific files for host builds.
-              ['include', '^atomicops_internals_x86_gcc\\.cc$'],
-              ['include', '^threading/platform_thread_linux\\.cc$'],
-            ],
-          }],
-          ['OS == "android" and <(android_webview_build)==1', {
-            'defines': [
-               # WebView builds as part of the system which already has sincos;
-               # avoid defining it again as it causes a linker warning.
-               'ANDROID_SINCOS_PROVIDED',
-            ],
-          }],
-          ['OS == "ios" and _toolset != "host"', {
-            'sources/': [
-              # Pull in specific Mac files for iOS (which have been filtered out
-              # by file name rules).
-              ['include', '^atomicops_internals_mac\\.'],
-              ['include', '^base_paths_mac\\.'],
-              ['include', '^file_util_mac\\.'],
-              ['include', '^file_version_info_mac\\.'],
-              ['include', '^mac/bundle_locations\\.'],
-              ['include', '^mac/foundation_util\\.'],
-              ['include', '^mac/mac_logging\\.'],
-              ['include', '^mac/mach_logging\\.'],
-              ['include', '^mac/objc_property_releaser\\.'],
-              ['include', '^mac/scoped_mach_port\\.'],
-              ['include', '^mac/scoped_mach_vm\\.'],
-              ['include', '^mac/scoped_nsautorelease_pool\\.'],
-              ['include', '^mac/scoped_nsobject\\.'],
-              ['include', '^memory/discardable_memory_mac\\.'],
-              ['include', '^message_loop/message_pump_mac\\.'],
-              ['include', '^strings/sys_string_conversions_mac\\.'],
-              ['include', '^threading/platform_thread_mac\\.'],
-              ['include', '^time/time_mac\\.'],
-              ['include', '^worker_pool_mac\\.'],
-              # Exclude all process/ except the minimal implementation
-              # needed on iOS (mostly for unit tests).
-              ['exclude', '^process/.*'],
-              ['include', '^process/.*_ios\.(cc|mm)$'],
-              ['include', '^process/memory_stubs\.cc$'],
-              ['include', '^process/process_handle_posix\.cc$'],
-              ['exclude', 'files/file_path_watcher_fsevents.cc'],
-              ['exclude', 'files/file_path_watcher_fsevents.h'],
-              ['include', 'files/file_path_watcher_mac.cc'],
-            ],
-            'sources': [
-              'process/memory_stubs.cc',
-            ],
-            'sources!': [
-              'message_loop/message_pump_libevent.cc'
-            ],
-          }],
-          ['OS == "ios" and _toolset == "host"', {
-            'sources/': [
-              # Copied filename_rules to switch from iOS to Mac inclusions.
-              ['include', '_(cocoa|mac)(_unittest)?\\.(h|cc|mm?)$'],
-              ['include', '(^|/)(cocoa|mac)/'],
-              ['exclude', '_ios(_unittest)?\\.(h|cc|mm?)$'],
-              ['exclude', '(^|/)ios/'],
-              ['exclude', 'files/file_path_watcher_fsevents.cc'],
-              ['exclude', 'files/file_path_watcher_fsevents.h'],
-              ['include', 'files/file_path_watcher_mac.cc'],
-            ]
-          }],
+          
           # For now, just test the *BSD platforms enough to exclude them.
           # Subsequent changes will include them further.
           ['OS != "freebsd" or >(nacl_untrusted_build)==1', {
@@ -929,75 +802,8 @@
               'files/file_path_watcher_stub.cc',
             ],
           }],
-          ['(OS == "mac" or OS == "ios") and >(nacl_untrusted_build)==0', {
-            'sources/': [
-              ['exclude', '^files/file_path_watcher_stub\\.cc$'],
-              ['exclude', '^base_paths_posix\\.cc$'],
-              ['exclude', '^native_library_posix\\.cc$'],
-              ['exclude', '^strings/sys_string_conversions_posix\\.cc$'],
-            ],
-          }],
-          ['<(os_bsd)==1 and >(nacl_untrusted_build)==0', {
-            'sources': [
-              'process/memory_stubs.cc',
-            ],
-            'sources/': [
-              ['exclude', '^files/file_path_watcher_linux\\.cc$'],
-              ['exclude', '^files/file_path_watcher_stub\\.cc$'],
-              ['exclude', '^file_util_linux\\.cc$'],
-              ['exclude', '^process/process_linux\\.cc$'],
-              ['exclude', '^sys_info_linux\\.cc$'],
-            ],
-          }],
-          # Remove all unnecessary files for build_nexe.py to avoid exceeding
-          # command-line-string limitation when building NaCl on Windows.
-          ['OS == "win" and >(nacl_untrusted_build)==1', {
-              'sources/': [ ['exclude', '\\.h$'] ],
-          }],
         ],
       }],
-      ['base_i18n_target==1', {
-        'defines': [
-          'BASE_I18N_IMPLEMENTATION',
-        ],
-        'sources': [
-          'i18n/base_i18n_export.h',
-          'i18n/bidi_line_iterator.cc',
-          'i18n/bidi_line_iterator.h',
-          'i18n/break_iterator.cc',
-          'i18n/break_iterator.h',
-          'i18n/case_conversion.cc',
-          'i18n/case_conversion.h',
-          'i18n/char_iterator.cc',
-          'i18n/char_iterator.h',
-          'i18n/file_util_icu.cc',
-          'i18n/file_util_icu.h',
-          'i18n/i18n_constants.cc',
-          'i18n/i18n_constants.h',
-          'i18n/icu_encoding_detection.cc',
-          'i18n/icu_encoding_detection.h',
-          'i18n/icu_string_conversions.cc',
-          'i18n/icu_string_conversions.h',
-          'i18n/icu_util.cc',
-          'i18n/icu_util.h',
-          'i18n/number_formatting.cc',
-          'i18n/number_formatting.h',
-          'i18n/rtl.cc',
-          'i18n/rtl.h',
-          'i18n/streaming_utf8_validator.cc',
-          'i18n/streaming_utf8_validator.h',
-          'i18n/string_compare.cc',
-          'i18n/string_compare.h',
-          'i18n/string_search.cc',
-          'i18n/string_search.h',
-          'i18n/time_formatting.cc',
-          'i18n/time_formatting.h',
-          'i18n/timezone.cc',
-          'i18n/timezone.h',
-          'i18n/utf8_validator_tables.cc',
-          'i18n/utf8_validator_tables.h',
-        ],
-      }]
     ],
   },
 }
Index: base/files/file_path.cc
===================================================================
--- base/files/file_path.cc	(revision 4)
+++ base/files/file_path.cc	(working copy)
@@ -176,6 +176,8 @@
 
 FilePath::FilePath(const FilePath& that) : path_(that.path_) {
 }
+FilePath::FilePath(FilePath&& that) : path_(std::move(that.path_)) {
+}
 
 FilePath::FilePath(const StringType& path) : path_(path) {
   StringType::size_type nul_pos = path_.find(kStringTerminator);
@@ -191,6 +193,11 @@
   return *this;
 }
 
+FilePath& FilePath::operator=(FilePath&& that) {
+  path_ = std::move(that.path_);
+  return *this;
+}
+
 bool FilePath::operator==(const FilePath& that) const {
 #if defined(FILE_PATH_USES_DRIVE_LETTERS)
   return EqualDriveLetterCaseInsensitive(this->path_, that.path_);
Index: base/files/file_path.h
===================================================================
--- base/files/file_path.h	(revision 4)
+++ base/files/file_path.h	(working copy)
@@ -163,11 +163,16 @@
   static const CharType kExtensionSeparator;
 
   FilePath();
+  
   FilePath(const FilePath& that);
+  FilePath(FilePath&& that);
+  
   explicit FilePath(const StringType& path);
   ~FilePath();
+  
   FilePath& operator=(const FilePath& that);
-
+  FilePath& operator=(FilePath&& that);
+  
   bool operator==(const FilePath& that) const;
 
   bool operator!=(const FilePath& that) const;
Index: base/gtest_prod_util.h
===================================================================
--- base/gtest_prod_util.h	(revision 4)
+++ base/gtest_prod_util.h	(working copy)
@@ -5,8 +5,9 @@
 #ifndef BASE_GTEST_PROD_UTIL_H_
 #define BASE_GTEST_PROD_UTIL_H_
 
+#if 0
 #include "testing/gtest/include/gtest/gtest_prod.h"
-
+#endif
 // This is a wrapper for gtest's FRIEND_TEST macro that friends
 // test with all possible prefixes. This is very helpful when changing the test
 // prefix, because the friend declarations don't need to be updated.
@@ -18,11 +19,14 @@
 //   void MyMethod();
 //   FRIEND_TEST_ALL_PREFIXES(MyClassTest, MyMethod);
 // };
+#if 0
 #define FRIEND_TEST_ALL_PREFIXES(test_case_name, test_name) \
   FRIEND_TEST(test_case_name, test_name); \
   FRIEND_TEST(test_case_name, DISABLED_##test_name); \
   FRIEND_TEST(test_case_name, FLAKY_##test_name)
-
+#else
+#define FRIEND_TEST_ALL_PREFIXES(test_case_name, test_name)	
+#endif
 // C++ compilers will refuse to compile the following code:
 //
 // namespace foo {
@@ -57,10 +61,13 @@
 //   foo::MyClass foo_class;
 //   foo_class.private_var = true;
 // }
-
+#if 0
 #define FORWARD_DECLARE_TEST(test_case_name, test_name) \
   class test_case_name##_##test_name##_Test; \
   class test_case_name##_##DISABLED_##test_name##_Test; \
   class test_case_name##_##FLAKY_##test_name##_Test
+#else
+#define FORWARD_DECLARE_TEST(test_case_name, test_name)
+#endif
 
 #endif  // BASE_GTEST_PROD_UTIL_H_
Index: base/logging.cc
===================================================================
--- base/logging.cc	(revision 4)
+++ base/logging.cc	(working copy)
@@ -104,11 +104,17 @@
 FileHandle log_file = NULL;
 
 // what should be prepended to each message?
+#if 0
 bool log_process_id = false;
 bool log_thread_id = false;
 bool log_timestamp = true;
 bool log_tickcount = false;
-
+#else
+bool log_process_id = true;
+bool log_thread_id = true;
+bool log_timestamp = true;
+bool log_tickcount = true;
+#endif
 // Should we pop up fatal debug messages in a dialog?
 bool show_error_dialogs = false;
 
@@ -359,6 +365,7 @@
   // Can log only to the system debug log.
   CHECK_EQ(settings.logging_dest & ~LOG_TO_SYSTEM_DEBUG_LOG, 0);
 #endif
+#if 0
   CommandLine* command_line = CommandLine::ForCurrentProcess();
   // Don't bother initializing g_vlog_info unless we use one of the
   // vlog switches.
@@ -375,7 +382,7 @@
                      command_line->GetSwitchValueASCII(switches::kVModule),
                      &min_log_level);
   }
-
+#endif
   logging_destination = settings.logging_dest;
 
   // ignore file options unless logging to file is set.
Index: base/posix/eintr_wrapper.h
===================================================================
--- base/posix/eintr_wrapper.h	(revision 4)
+++ base/posix/eintr_wrapper.h	(working copy)
@@ -25,7 +25,7 @@
 #if defined(NDEBUG)
 
 #define HANDLE_EINTR(x) ({ \
-  typeof(x) eintr_wrapper_result; \
+  decltype(x) eintr_wrapper_result; \
   do { \
     eintr_wrapper_result = (x); \
   } while (eintr_wrapper_result == -1 && errno == EINTR); \
@@ -36,7 +36,7 @@
 
 #define HANDLE_EINTR(x) ({ \
   int eintr_wrapper_counter = 0; \
-  typeof(x) eintr_wrapper_result; \
+  decltype(x) eintr_wrapper_result; \
   do { \
     eintr_wrapper_result = (x); \
   } while (eintr_wrapper_result == -1 && errno == EINTR && \
@@ -47,7 +47,7 @@
 #endif  // NDEBUG
 
 #define IGNORE_EINTR(x) ({ \
-  typeof(x) eintr_wrapper_result; \
+  decltype(x) eintr_wrapper_result; \
   do { \
     eintr_wrapper_result = (x); \
     if (eintr_wrapper_result == -1 && errno == EINTR) { \
Index: build/common.gypi
===================================================================
--- build/common.gypi	(revision 4)
+++ build/common.gypi	(working copy)
@@ -2967,8 +2967,8 @@
       'Common_Base': {
         'abstract': 1,
         'msvs_configuration_attributes': {
-          'OutputDirectory': '<(DEPTH)\\build\\<(build_dir_prefix)$(ConfigurationName)',
-          'IntermediateDirectory': '$(OutDir)\\obj\\$(ProjectName)',
+          'OutputDirectory': '<(DEPTH)/<(build_dir)/<(build_dir_prefix)$(ConfigurationName)',
+          'IntermediateDirectory': '$(OutDir)/obj/$(ProjectName)',
           'CharacterSet': '1',
         },
         # Add the default import libs.
@@ -3035,7 +3035,7 @@
       'Debug_Base': {
         'abstract': 1,
         'defines': [
-          'DYNAMIC_ANNOTATIONS_ENABLED=1',
+          'DYNAMIC_ANNOTATIONS_ENABLED=0',
           'WTF_USE_DYNAMIC_ANNOTATIONS=1',
         ],
         'xcode_settings': {
@@ -5128,7 +5128,7 @@
             'EnableFunctionLevelLinking': 'true',
             'RuntimeTypeInfo': 'false',
             'WarningLevel': '4',
-            'WarnAsError': 'true',
+            'WarnAsError': 'false',
             'DebugInformationFormat': '3',
             'conditions': [
               ['component=="shared_library"', {
Index: build/gyp_chromium
===================================================================
--- build/gyp_chromium	(revision 4)
+++ build/gyp_chromium	(working copy)
@@ -15,29 +15,39 @@
 import subprocess
 import string
 import sys
-import vs_toolchain
 
-script_dir = os.path.dirname(os.path.realpath(__file__))
-chrome_src = os.path.abspath(os.path.join(script_dir, os.pardir))
+# prepare ninja
+use_ninja = False
+if os.environ.get('GYP_GENERATORS', '') == 'ninja':
+  use_ninja = True
 
-sys.path.insert(0, os.path.join(chrome_src, 'tools', 'gyp', 'pylib'))
+if use_ninja:
+  tool_chain_script = os.environ.get('ENV_WIN_TOOL_CHAIN_SCRIPT', '')
+  tool_chain_dir = os.path.dirname(tool_chain_script)
+  sys.path.insert(0, tool_chain_dir)
+  import vs_toolchain
+
+# prepare gyp
+sys.path.insert(0, os.environ.get('ENV_GYP_DIRECTORY'))
 import gyp
 
+script_dir = os.path.dirname(os.path.realpath(__file__))
+chrome_src = os.path.abspath(os.path.join(script_dir, os.pardir))
 # Assume this file is in a one-level-deep subdirectory of the source root.
-SRC_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+#SRC_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
 
 # Add paths so that pymod_do_main(...) can import files.
-sys.path.insert(1, os.path.join(chrome_src, 'tools'))
-sys.path.insert(1, os.path.join(chrome_src, 'tools', 'generate_shim_headers'))
-sys.path.insert(1, os.path.join(chrome_src, 'tools', 'grit'))
-sys.path.insert(1, os.path.join(chrome_src, 'chrome', 'tools', 'build'))
-sys.path.insert(1, os.path.join(chrome_src, 'native_client', 'build'))
-sys.path.insert(1, os.path.join(chrome_src, 'native_client_sdk', 'src',
-    'build_tools'))
-sys.path.insert(1, os.path.join(chrome_src, 'remoting', 'tools', 'build'))
-sys.path.insert(1, os.path.join(chrome_src, 'third_party', 'liblouis'))
-sys.path.insert(1, os.path.join(chrome_src, 'third_party', 'WebKit',
-    'Source', 'build', 'scripts'))
+#sys.path.insert(1, os.path.join(chrome_src, 'tools'))
+#sys.path.insert(1, os.path.join(chrome_src, 'tools', 'generate_shim_headers'))
+#sys.path.insert(1, os.path.join(chrome_src, 'tools', 'grit'))
+#sys.path.insert(1, os.path.join(chrome_src, 'chrome', 'tools', 'build'))
+#sys.path.insert(1, os.path.join(chrome_src, 'native_client', 'build'))
+#sys.path.insert(1, os.path.join(chrome_src, 'native_client_sdk', 'src',
+#    'build_tools'))
+#sys.path.insert(1, os.path.join(chrome_src, 'remoting', 'tools', 'build'))
+#sys.path.insert(1, os.path.join(chrome_src, 'third_party', 'liblouis'))
+#sys.path.insert(1, os.path.join(chrome_src, 'third_party', 'WebKit',
+#    'Source', 'build', 'scripts'))
 
 # On Windows, Psyco shortens warm runs of build/gyp_chromium by about
 # 20 seconds on a z600 machine with 12 GB of RAM, from 90 down to 70
@@ -51,8 +61,9 @@
 # may not be worth it).
 if sys.platform == 'win32':
   try:
-    sys.path.insert(0, os.path.join(chrome_src, 'third_party', 'psyco_win32'))
-    import psyco
+    #sys.path.insert(0, os.path.join(chrome_src, 'third_party', 'psyco_win32'))
+    #import psyco
+    psyco = None
   except:
     psyco = None
 else:
@@ -270,8 +281,8 @@
       not 'OS=ios' in os.environ.get('GYP_DEFINES', []):
     os.environ['GYP_GENERATORS'] = 'ninja'
 
-  vs2013_runtime_dll_dirs = vs_toolchain.SetEnvironmentAndGetRuntimeDllDirs()
-
+  if use_ninja:
+    vs2013_runtime_dll_dirs = vs_toolchain.SetEnvironmentAndGetRuntimeDllDirs()
   # If CHROMIUM_GYP_SYNTAX_CHECK is set to 1, it will invoke gyp with --check
   # to enfore syntax checking.
   syntax_check = os.environ.get('CHROMIUM_GYP_SYNTAX_CHECK')
@@ -310,6 +321,7 @@
   print 'Updating projects from gyp files...'
   sys.stdout.flush()
 
+  print args
   # Off we go...
   gyp_rc = gyp.main(args)
 
@@ -317,13 +329,7 @@
   # rather than a separate runhooks step so that any environment modifications
   # from above are picked up.
   print 'Running build/landmines.py...'
-  subprocess.check_call(
-      [sys.executable, os.path.join(script_dir, 'landmines.py')])
+  #subprocess.check_call(
+  #    [sys.executable, os.path.join(script_dir, 'landmines.py')])
 
-  if vs2013_runtime_dll_dirs:
-    x64_runtime, x86_runtime = vs2013_runtime_dll_dirs
-    vs_toolchain.CopyVsRuntimeDlls(
-        os.path.join(chrome_src, GetOutputDirectory()),
-        (x86_runtime, x64_runtime))
-
   sys.exit(gyp_rc)
Index: build/linux/system.gyp
===================================================================
--- build/linux/system.gyp	(revision 4)
+++ build/linux/system.gyp	(working copy)
@@ -3,6 +3,9 @@
 # found in the LICENSE file.
 
 {
+  'includes': [
+    '../common.gypi',
+  ],
   'variables': {
     'conditions': [
       ['sysroot!=""', {
@@ -17,591 +20,8 @@
     'linux_link_libspeechd%': 0,
     'linux_link_libbrlapi%': 0,
   },
-  'conditions': [
-    [ 'chromeos==0 and use_ozone==0', {
-      # Hide GTK and related dependencies for Chrome OS and Ozone, so they won't get
-      # added back to Chrome OS and Ozone. Don't try to use GTK on Chrome OS and Ozone.
-      'targets': [
-        {
-          'target_name': 'gdk',
-          'type': 'none',
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags gdk-2.0)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other gdk-2.0)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l gdk-2.0)',
-                ],
-              },
-            }],
-          ],
-        },
-        {
-          'target_name': 'gtk',
-          'type': 'none',
-          'toolsets': ['host', 'target'],
-          'variables': {
-            # gtk requires gmodule, but it does not list it as a dependency
-            # in some misconfigured systems.
-            'gtk_packages': 'gmodule-2.0 gtk+-2.0 gthread-2.0',
-          },
-          'conditions': [
-            ['_toolset=="target"', {
-              'all_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags <(gtk_packages))',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other <(gtk_packages))',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l <(gtk_packages))',
-                ],
-              },
-            }, {
-              'all_dependent_settings': {
-                'cflags': [
-                  '<!@(pkg-config --cflags <(gtk_packages))',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(pkg-config --libs-only-L --libs-only-other <(gtk_packages))',
-                ],
-                'libraries': [
-                  '<!@(pkg-config --libs-only-l <(gtk_packages))',
-                ],
-              },
-            }],
-          ],
-        },
-        {
-          'target_name': 'gtkprint',
-          'type': 'none',
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags gtk+-unix-print-2.0)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other gtk+-unix-print-2.0)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l gtk+-unix-print-2.0)',
-                ],
-              },
-            }],
-          ],
-        },
-      ],  # targets
-    }],
-    [ 'use_x11==1 or ozone_platform_ozonex==1', {
-      # Hide X11 and related dependencies when use_x11=0
-      'targets': [
-        {
-          'target_name': 'x11',
-          'type': 'none',
-          'toolsets': ['host', 'target'],
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags x11)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other x11 xi)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l x11 xi)',
-                ],
-              },
-            }, {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(pkg-config --cflags x11)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(pkg-config --libs-only-L --libs-only-other x11 xi)',
-                ],
-                'libraries': [
-                  '<!@(pkg-config --libs-only-l x11 xi)',
-                ],
-              },
-            }],
-          ],
-        },
-        {
-          'target_name': 'xcursor',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xcursor)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xcursor)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xcursor)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xcomposite',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xcomposite)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xcomposite)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xcomposite)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xdamage',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xdamage)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xdamage)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xdamage)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xext',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xext)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xext)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xext)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xfixes',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xfixes)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xfixes)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xfixes)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xi',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xi)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xi)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xi)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xrandr',
-          'type': 'none',
-          'toolsets': ['host', 'target'],
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags xrandr)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other xrandr)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l xrandr)',
-                ],
-              },
-            }, {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(pkg-config --cflags xrandr)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(pkg-config --libs-only-L --libs-only-other xrandr)',
-                ],
-                'libraries': [
-                  '<!@(pkg-config --libs-only-l xrandr)',
-                ],
-              },
-            }],
-          ],
-        },
-        {
-          'target_name': 'xrender',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xrender)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xrender)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xrender)',
-            ],
-          },
-        },
-        {
-          'target_name': 'xtst',
-          'type': 'none',
-          'toolsets': ['host', 'target'],
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags xtst)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other xtst)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l xtst)',
-                ],
-              },
-            }, {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(pkg-config --cflags xtst)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(pkg-config --libs-only-L --libs-only-other xtst)',
-                ],
-                'libraries': [
-                  '<!@(pkg-config --libs-only-l xtst)',
-                ],
-              },
-            }]
-          ]
-        }
-      ],  # targets
-    }],
-    ['use_x11==1 and chromeos==0', {
-      'targets': [
-        {
-          'target_name': 'xscrnsaver',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xscrnsaver)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xscrnsaver)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xscrnsaver)',
-            ],
-          },
-        },
-      ],  # targets
-    }],
-    ['use_evdev_gestures==1', {
-      'targets': [
-        {
-          'target_name': 'libevdev-cros',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags libevdev-cros)'
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other libevdev-cros)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l libevdev-cros)',
-            ],
-          },
-        },
-        {
-          'target_name': 'libgestures',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags libgestures)'
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other libgestures)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l libgestures)',
-            ],
-          },
-        },
-      ],
-    }],
-    ['ozone_platform_gbm==1', {
-      'targets': [
-        {
-          'target_name': 'gbm',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags gbm)',
-            ],
-          },
-          'link_settings': {
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l gbm)',
-            ],
-          },
-        },
-      ],
-    }],
-  ],  # conditions
   'targets': [
     {
-      'target_name': 'dbus',
-      'type': 'none',
-      'direct_dependent_settings': {
-        'cflags': [
-          '<!@(<(pkg-config) --cflags dbus-1)',
-        ],
-      },
-      'link_settings': {
-        'ldflags': [
-          '<!@(<(pkg-config) --libs-only-L --libs-only-other dbus-1)',
-        ],
-        'libraries': [
-          '<!@(<(pkg-config) --libs-only-l dbus-1)',
-        ],
-      },
-    },
-    {
-      'target_name': 'dridrm',
-      'type': 'none',
-      'direct_dependent_settings': {
-        'cflags': [
-          '<!@(<(pkg-config) --cflags libdrm)',
-        ],
-      },
-      'link_settings': {
-        'libraries': [
-          '<!@(<(pkg-config) --libs-only-l libdrm)',
-        ],
-      },
-    },
-    {
-      'target_name': 'fontconfig',
-      'type': 'none',
-      'conditions': [
-        ['_toolset=="target"', {
-          'conditions': [
-            ['use_system_fontconfig==1', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags fontconfig)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other fontconfig)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l fontconfig)',
-                ],
-              },
-            }, {  # use_system_fontconfig==0
-              'dependencies': [
-                '../../third_party/fontconfig/fontconfig.gyp:fontconfig',
-              ],
-              'export_dependent_settings' : [
-                '../../third_party/fontconfig/fontconfig.gyp:fontconfig',
-              ],
-            }],
-          ],
-        }],
-      ],
-    },
-    {
-      'target_name': 'freetype2',
-      'type': 'none',
-      'conditions': [
-        ['_toolset=="target"', {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags freetype2)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other freetype2)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l freetype2)',
-            ],
-          },
-        }],
-      ],
-    },
-    {
-      'target_name': 'gconf',
-      'type': 'none',
-      'conditions': [
-        ['use_gconf==1 and _toolset=="target"', {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags gconf-2.0)',
-            ],
-            'defines': [
-              'USE_GCONF',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other gconf-2.0)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l gconf-2.0)',
-            ],
-          },
-        }],
-      ],
-    },
-    {
-      'target_name': 'gio',
-      'type': 'static_library',
-      'conditions': [
-        ['use_gio==1 and _toolset=="target"', {
-          'cflags': [
-            '<!@(<(pkg-config) --cflags gio-2.0)',
-          ],
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags gio-2.0)',
-            ],
-            'defines': [
-              'USE_GIO',
-            ],
-            'include_dirs': [
-              '<(SHARED_INTERMEDIATE_DIR)',
-            ],
-          },
-          'include_dirs': [
-            '../..',
-          ],
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other gio-2.0)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l gio-2.0)',
-            ],
-            'conditions': [
-              ['linux_link_gsettings==0 and OS=="linux"', {
-                'libraries': [
-                  '-ldl',
-                ],
-              }],
-            ],
-          },
-          'hard_dependency': 1,
-          'actions': [
-            {
-              'variables': {
-                'output_h': '<(SHARED_INTERMEDIATE_DIR)/library_loaders/libgio.h',
-                'output_cc': '<(INTERMEDIATE_DIR)/libgio_loader.cc',
-                'generator': '../../tools/generate_library_loader/generate_library_loader.py',
-              },
-              'action_name': 'generate_libgio_loader',
-              'inputs': [
-                '<(generator)',
-              ],
-              'outputs': [
-                '<(output_h)',
-                '<(output_cc)',
-              ],
-              'action': ['python',
-                         '<(generator)',
-                         '--name', 'LibGioLoader',
-                         '--output-h', '<(output_h)',
-                         '--output-cc', '<(output_cc)',
-                         '--header', '<gio/gio.h>',
-                         '--link-directly=<(linux_link_gsettings)',
-                         'g_settings_new',
-                         'g_settings_get_child',
-                         'g_settings_get_string',
-                         'g_settings_get_boolean',
-                         'g_settings_get_int',
-                         'g_settings_get_strv',
-                         'g_settings_list_schemas',
-              ],
-              'message': 'Generating libgio library loader',
-              'process_outputs_as_sources': 1,
-            },
-          ],
-        }],
-      ],
-    },
-    {
       'target_name': 'glib',
       'type': 'none',
       'toolsets': ['host', 'target'],
@@ -640,410 +60,5 @@
         }],
       ],
     },
-    {
-      'target_name': 'gnome_keyring',
-      'type': 'none',
-      'conditions': [
-        ['use_gnome_keyring==1', {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags gnome-keyring-1)',
-            ],
-            'defines': [
-              'USE_GNOME_KEYRING',
-            ],
-            'conditions': [
-              ['linux_link_gnome_keyring==0', {
-                'defines': ['DLOPEN_GNOME_KEYRING'],
-              }],
-            ],
-          },
-          'conditions': [
-            ['linux_link_gnome_keyring!=0', {
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other gnome-keyring-1)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l gnome-keyring-1)',
-                ],
-              },
-            }, {
-              'conditions': [
-                ['OS=="linux"', {
-                 'link_settings': {
-                   'libraries': [
-                     '-ldl',
-                   ],
-                 },
-                }],
-              ],
-            }],
-          ],
-        }],
-      ],
-    },
-    {
-      # The unit tests use a few convenience functions from the GNOME
-      # Keyring library directly. We ignore linux_link_gnome_keyring and
-      # link directly in this version of the target to allow this.
-      # *** Do not use this target in the main binary! ***
-      'target_name': 'gnome_keyring_direct',
-      'type': 'none',
-      'conditions': [
-        ['use_gnome_keyring==1', {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags gnome-keyring-1)',
-            ],
-            'defines': [
-              'USE_GNOME_KEYRING',
-            ],
-            'conditions': [
-              ['linux_link_gnome_keyring==0', {
-                'defines': ['DLOPEN_GNOME_KEYRING'],
-              }],
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other gnome-keyring-1)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l gnome-keyring-1)',
-            ],
-          },
-        }],
-      ],
-    },
-    {
-      'target_name': 'libbrlapi',
-      'type': 'static_library',
-      'all_dependent_settings': {
-        'include_dirs': [
-          '<(SHARED_INTERMEDIATE_DIR)',
-        ],
-        'defines': [
-          'USE_BRLAPI',
-        ],
-        'conditions': [
-          ['linux_link_libbrlapi==1', {
-            'link_settings': {
-              'libraries': [
-                '-lbrlapi',
-              ],
-            }
-          }],
-        ],
-      },
-      'include_dirs': [
-        '../..',
-      ],
-      'hard_dependency': 1,
-      'actions': [
-        {
-          'variables': {
-            'output_h': '<(SHARED_INTERMEDIATE_DIR)/library_loaders/libbrlapi.h',
-            'output_cc': '<(INTERMEDIATE_DIR)/libbrlapi_loader.cc',
-            'generator': '../../tools/generate_library_loader/generate_library_loader.py',
-          },
-          'action_name': 'generate_brlapi_loader',
-          'inputs': [
-            '<(generator)',
-          ],
-          'outputs': [
-            '<(output_h)',
-            '<(output_cc)',
-          ],
-          'action': ['python',
-                     '<(generator)',
-                     '--name', 'LibBrlapiLoader',
-                     '--output-h', '<(output_h)',
-                     '--output-cc', '<(output_cc)',
-                     '--header', '<brlapi.h>',
-                     '--link-directly=<(linux_link_libbrlapi)',
-                     'brlapi_getHandleSize',
-                     'brlapi_error_location',
-                     'brlapi_strerror',
-                     'brlapi__acceptKeys',
-                     'brlapi__openConnection',
-                     'brlapi__closeConnection',
-                     'brlapi__getDisplaySize',
-                     'brlapi__enterTtyModeWithPath',
-                     'brlapi__leaveTtyMode',
-                     'brlapi__writeDots',
-                     'brlapi__readKey',
-          ],
-          'message': 'Generating libbrlapi library loader',
-          'process_outputs_as_sources': 1,
-        },
-      ],
-    },
-    {
-      'target_name': 'libcap',
-      'type': 'none',
-      'link_settings': {
-        'libraries': [
-          '-lcap',
-        ],
-      },
-    },
-    {
-      'target_name': 'libpci',
-      'type': 'static_library',
-      'cflags': [
-        '<!@(<(pkg-config) --cflags libpci)',
-      ],
-      'direct_dependent_settings': {
-        'include_dirs': [
-          '<(SHARED_INTERMEDIATE_DIR)',
-        ],
-        'conditions': [
-          ['linux_link_libpci==1', {
-            'link_settings': {
-              'ldflags': [
-                '<!@(<(pkg-config) --libs-only-L --libs-only-other libpci)',
-              ],
-              'libraries': [
-                '<!@(<(pkg-config) --libs-only-l libpci)',
-              ],
-            }
-          }],
-        ],
-      },
-      'include_dirs': [
-        '../..',
-      ],
-      'hard_dependency': 1,
-      'actions': [
-        {
-          'variables': {
-            'output_h': '<(SHARED_INTERMEDIATE_DIR)/library_loaders/libpci.h',
-            'output_cc': '<(INTERMEDIATE_DIR)/libpci_loader.cc',
-            'generator': '../../tools/generate_library_loader/generate_library_loader.py',
-          },
-          'action_name': 'generate_libpci_loader',
-          'inputs': [
-            '<(generator)',
-          ],
-          'outputs': [
-            '<(output_h)',
-            '<(output_cc)',
-          ],
-          'action': ['python',
-                     '<(generator)',
-                     '--name', 'LibPciLoader',
-                     '--output-h', '<(output_h)',
-                     '--output-cc', '<(output_cc)',
-                     '--header', '<pci/pci.h>',
-                     # TODO(phajdan.jr): Report problem to pciutils project
-                     # and get it fixed so that we don't need --use-extern-c.
-                     '--use-extern-c',
-                     '--link-directly=<(linux_link_libpci)',
-                     'pci_alloc',
-                     'pci_init',
-                     'pci_cleanup',
-                     'pci_scan_bus',
-                     'pci_fill_info',
-                     'pci_lookup_name',
-          ],
-          'message': 'Generating libpci library loader',
-          'process_outputs_as_sources': 1,
-        },
-      ],
-    },
-    {
-      'target_name': 'libresolv',
-      'type': 'none',
-      'link_settings': {
-        'libraries': [
-          '-lresolv',
-        ],
-      },
-    },
-    {
-      'target_name': 'libspeechd',
-      'type': 'static_library',
-      'direct_dependent_settings': {
-        'include_dirs': [
-          '<(SHARED_INTERMEDIATE_DIR)',
-        ],
-        'conditions': [
-          ['linux_link_libspeechd==1', {
-            'link_settings': {
-              'libraries': [
-                '-lspeechd',
-              ],
-            }
-          }],
-        ],
-      },
-      'include_dirs': [
-        '../..',
-      ],
-      'hard_dependency': 1,
-      'actions': [
-        {
-          'variables': {
-            'output_h': '<(SHARED_INTERMEDIATE_DIR)/library_loaders/libspeechd.h',
-            'output_cc': '<(INTERMEDIATE_DIR)/libspeechd_loader.cc',
-            'generator': '../../tools/generate_library_loader/generate_library_loader.py',
-
-            # speech-dispatcher >= 0.8 installs libspeechd.h into
-            # speech-dispatcher/libspeechd.h, whereas speech-dispatcher < 0.8
-            # puts libspeechd.h in the top-level include directory.
-            # Since we need to support both cases for now, we ship a copy of
-            # libspeechd.h in third_party/speech-dispatcher. If the user
-            # prefers to link against the speech-dispatcher directly, the
-            # `libspeechd_h_prefix' variable can be passed to gyp with a value
-            # such as "speech-dispatcher/" that will be prepended to
-            # "libspeechd.h" in the #include directive.
-            # TODO(phaldan.jr): Once we do not need to support
-            # speech-dispatcher < 0.8 we can get rid of all this (including
-            # third_party/speech-dispatcher) and just include
-            # speech-dispatcher/libspeechd.h unconditionally.
-            'libspeechd_h_prefix%': '',
-          },
-          'action_name': 'generate_libspeechd_loader',
-          'inputs': [
-            '<(generator)',
-          ],
-          'outputs': [
-            '<(output_h)',
-            '<(output_cc)',
-          ],
-          'action': ['python',
-                     '<(generator)',
-                     '--name', 'LibSpeechdLoader',
-                     '--output-h', '<(output_h)',
-                     '--output-cc', '<(output_cc)',
-                     '--header', '<<(libspeechd_h_prefix)libspeechd.h>',
-                     '--bundled-header',
-                     '"third_party/speech-dispatcher/libspeechd.h"',
-                     '--link-directly=<(linux_link_libspeechd)',
-                     'spd_open',
-                     'spd_say',
-                     'spd_stop',
-                     'spd_close',
-                     'spd_pause',
-                     'spd_resume',
-                     'spd_set_notification_on',
-                     'spd_set_voice_rate',
-                     'spd_set_voice_pitch',
-                     'spd_list_synthesis_voices',
-                     'spd_set_synthesis_voice',
-                     'spd_list_modules',
-                     'spd_set_output_module',
-          ],
-          'message': 'Generating libspeechd library loader',
-          'process_outputs_as_sources': 1,
-        },
-      ],
-    },
-    {
-      'target_name': 'pangocairo',
-      'type': 'none',
-      'toolsets': ['host', 'target'],
-      'conditions': [
-        ['_toolset=="target"', {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags pangocairo pangoft2)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other pangocairo pangoft2)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l pangocairo pangoft2)',
-            ],
-          },
-        }, {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(pkg-config --cflags pangocairo pangoft2)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(pkg-config --libs-only-L --libs-only-other pangocairo pangoft2)',
-            ],
-            'libraries': [
-              '<!@(pkg-config --libs-only-l pangocairo pangoft2)',
-            ],
-          },
-        }],
-      ],
-    },
-    {
-      'target_name': 'ssl',
-      'type': 'none',
-      'conditions': [
-        ['_toolset=="target"', {
-          'conditions': [
-            ['use_openssl==1', {
-              'dependencies': [
-                '../../third_party/openssl/openssl.gyp:openssl',
-              ],
-            }],
-            ['use_openssl==0', {
-              'dependencies': [
-                '../../net/third_party/nss/ssl.gyp:libssl',
-              ],
-              'direct_dependent_settings': {
-                'include_dirs+': [
-                  # We need for our local copies of the libssl3 headers to come
-                  # before other includes, as we are shadowing system headers.
-                  '<(DEPTH)/net/third_party/nss/ssl',
-                ],
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags nss)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other nss)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l nss | sed -e "s/-lssl3//")',
-                ],
-              },
-            }],
-            ['use_openssl==0 and clang==1', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  # There is a broken header guard in /usr/include/nss/secmod.h:
-                  # https://bugzilla.mozilla.org/show_bug.cgi?id=884072
-                  '-Wno-header-guard',
-                ],
-              },
-            }],
-          ]
-        }],
-      ],
-    },
-    {
-      'target_name': 'udev',
-      'type': 'none',
-      'conditions': [
-        # libudev is not available on *BSD
-        ['_toolset=="target" and os_bsd!=1', {
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags libudev)'
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other libudev)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l libudev)',
-            ],
-          },
-        }],
-      ],
-    },
   ],
 }
