#include "fmt/format.h"
#include <cmath>
#include <vector>
#include <algorithm>
using namespace fmt;
using namespace std;

namespace PE483 {
    // double softmax(double a, double b) {
    //     return
    // }
    const int n = 350;
    const int N = 500;
    double limit = -100;

    pair<int, int> stack[N];
    double log_fac[N], log_i[N];
    int exponent[N], top = 0;
    // vector<pair<int, int>> factors[N];
    double ans = -1e100, best = -100;
    double answers[N];
    long count = 0, T, select[N], current_n;
    bool is_prime[N];
    int new_numbers[N];
    int beg[N], end[N], factors[N * 10], exponents[N * 10];

    double bests[N] = {
        0, 0.0000000000, 0.6931471806, 1.0986122887, 1.3862943611, 1.7917594692, 1.7917594692, 2.4849066498, 2.7080502011, 2.9957322736, 3.4011973817, 3.4011973817, 4.0943445622, 4.0943445622, 4.4308167988, 4.6539603502, 4.9416424226, 5.3471075307, 5.3471075307, 6.0402547113, 6.0402547113, 5.7990926545, 5.8861040315, 6.7334018918, 6.7334018918, 7.1388669999, 7.1388669999, 7.3395376954, 7.7450028035, 7.8320141805, 8.4381499841, 8.4381499841, 8.6052040687, 8.6052040687, 9.1312971646, 9.1312971646, 9.5367622727, 9.5367622727, 9.7038163574, 9.7038163574, 10.2299094533, 10.3099521610, 10.3969635380, 11.0030993415, 11.0030993415, 10.7154172691, 10.8489486617, 11.6962465221, 11.6962465221, 12.1017116302, 12.1017116302, 11.9645105087, 11.9645105087, 12.7948588108, 12.7948588108, 12.5370297015, 12.5370297015, 13.0631227974, 13.1431655050, 13.2301768820, 13.8363126856, 13.8363126856, 13.9475383207, 13.9475383207, 14.5294598662, 14.5294598662, 14.9349249743, 14.9349249743, 15.0461506094, 15.0461506094, 15.6280721548, 15.6280721548, 15.7392977899, 15.7392977899, 15.4814686806, 15.4814686806, 16.0075617765, 16.0876044842, 16.3212193354, 16.7807516648, 16.7807516648, 16.4930695923, 16.6266009849, 17.4738988453, 17.4738988453, 17.8793639534, 17.8793639534, 17.6649540821, 17.6649540821, 18.5725111340, 18.5725111340, 18.1816448253, 18.1816448253, 18.7635663708, 18.7635663708, 18.8747920059, 18.8747920059, 19.2656583145, 19.2656583145, 19.1430559925, 19.2230987001, 19.4567135513, 19.9162458807, 19.9162458807, 19.6285638082, 19.7620952009, 20.6093930612, 20.6093930612, 21.0148581694, 21.0148581694, 20.3217109888, 20.3217109888, 21.7080053499, 21.7080053499, 21.3025402418, 21.3025402418, 21.3133511579, 21.3133511579, 21.9398069640, 21.9398069640, 22.4011525305, 22.4011525305, 22.1308622007, 22.1308622007, 22.2420878358, 22.2420878358, 22.6329541445, 22.6329541445, 22.6996455190, 22.6996455190, 22.8240093813, 23.2835417107, 23.3174432624, 23.3502330852, 23.3502330852, 23.9766888912, 23.9766888912, 24.3821539993, 24.3821539993, 24.4488453738, 24.4488453738, 25.0753011799, 25.0753011799, 25.1419925544, 25.1419925544, 24.7365274463, 24.7365274463, 24.4662371166, 24.4662371166, 25.7684483605, 25.7684483605, 25.8351397350, 25.8351397350, 25.5648494052, 25.5648494052, 25.6760750403, 25.6760750403, 26.0669413490, 26.0669413490, 26.1739134686, 26.1739134686, 26.6847390923, 26.7175289152, 26.7514304668, 26.7514304668, 26.5633782353, 27.4106760957, 27.4106760957, 27.8161412038, 27.8161412038, 27.3778862729, 27.4445776474, 28.5092883844, 28.5092883844, 28.1038232763, 28.1038232763, 28.0597632865, 28.0597632865, 28.6862190925, 28.6862190925, 29.2024355649, 29.2024355649, 28.7888732466, 28.7888732466, 28.8555646211, 28.8555646211, 29.3793662731, 29.3793662731, 29.4460576476, 29.4460576476, 29.6079006731, 29.6079006731, 30.1187262968, 30.1187262968, 29.7132611887, 29.7132611887, 29.8955827455, 29.8955827455, 30.3010478536, 30.3284468278, 30.8118734774, 30.8118734774, 30.3983111590, 31.0215940084, 31.0215940084, 31.4270591165, 31.4270591165, 31.1242481624, 31.1242481624, 32.1202062970, 32.1202062970, 31.7147411889, 31.7147411889, 32.2228604511, 32.2228604511, 32.2704885001, 32.2704885001, 32.8133534776, 32.8133534776, 32.3997911593, 32.3997911593, 32.9160076317, 32.9160076317, 32.9636356806, 32.9636356806, 33.0364970289, 33.0364970289, 33.2188185857, 33.2188185857, 33.7296442095, 33.7296442095, 33.3241791014, 33.3241791014, 33.8322983635, 33.8322983635, 33.9119657663, 33.9119657663, 34.4227913900, 34.4227913900, 34.0146199203, 34.0420188945, 34.5254455441, 34.5254455441, 34.5730735931, 34.7351660751, 34.7351660751, 35.1406311832, 35.1406311832, 35.1882592322, 35.1882592322, 35.8337783637, 35.8337783637, 35.8814064127, 35.8814064127, 35.4759413046, 35.5214036787, 35.9840605668, 35.9840605668, 36.5269255443, 36.5269255443, 36.5745535933, 36.5745535933, 36.1609912749, 36.1609912749, 36.6772077473, 36.6772077473, 36.7500690956, 36.7500690956, 36.9323906524, 36.9323906524, 37.4432162762, 37.4432162762, 37.4908443252, 37.4908443252, 37.2200727249, 37.2200727249, 37.6255378330, 37.6255378330, 38.1363634567, 38.1363634567, 38.1839915057, 38.1839915057, 37.7758200360, 37.8032190102, 38.2866456598, 38.2866456598, 37.8963094333, 38.4963661908, 38.5418285648, 38.9018312989, 38.9018312989, 38.5894566138, 38.5853136768, 39.5949784794, 39.5949784794, 39.1895133713, 39.2349757454, 39.6839259654, 39.6839259654, 39.7315540144, 39.7315540144, 40.2881256600, 40.2881256600, 39.8342081685, 39.8342081685, 40.3770731460, 40.3770731460, 40.4247011950, 40.4247011950, 40.5112692113, 40.5112692113, 40.6935907681, 40.6935907681, 41.2044163919, 41.2044163919, 40.7989512838, 40.7989512838, 41.2933638779, 41.2933638779, 41.3867379487, 41.3867379487, 41.8975635724, 41.8975635724, 41.4756854347, 41.4756854347, 41.9865110584, 41.9865110584, 42.0341391074, 42.0341391074, 41.6259676377, 41.6533666119, 42.3030286805, 42.3030286805, 42.1542834193, 42.3465137925, 42.3919761665, 42.7519789006, 42.7519789006, 42.5907107530, 42.9961758611, 43.4451260811, 43.4451260811, 43.0396609730, 43.0851233471, 43.0851233471, 43.1327513961, 43.5652703930, 43.5652703930, 44.1382732617, 44.1382732617, 43.6542178790,
    };
    int perm[N] = {
        0, 1, 13, 19, 17, 23, 7, 29, 31, 37, 41, 5, 9, 47, 8, 53, 43, 16, 1, 25, 27, 3, 32, 4, 2, 10, 6, 12, 14, 15, 18, 20, 21, 22, 24, 26, 28, 30, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
    };

    void dfs(int depth, int sum, double total) {
        if (depth > sum)
            depth = sum;
        if (total != 0 && total + bests[sum] < best) {
            return;
        }

        if (depth == 0) {
            if (sum != 0)
                return;

            if (total > best) {
                best = total;
                for (int i = 1; i <= T; ++i) {
                    int x = select[i];
                    for (int j = 1; j <= current_n; ++j) {
                        swap(x, new_numbers[j]);
                        if (x == select[i]) {
                            break;
                        }
                    }
                }
                // print("update best: {} ", best);
                // for (int i = 1; i <= T; ++i) {
                //     print("{} ", select[i]);
                // }
                // print("\n");
            }
            if (ans < total) {
                swap(ans, total);
            }
            ans += log(1 + exp(total - ans));

            return;
        }

        dfs(depth - 1, sum, total);
        // if (!is_prime[depth] && depth > 30)
        //     return;
        int num = perm[depth];
        // print("depth = {}, num = {}\n", depth, num);

        int cnt = 0;
        for (int idx = beg[num] + 1; idx <= end[num]; ++idx) {
            int p = factors[idx], e = exponents[idx];
            if (exponent[p] < e) {
                ++cnt;
                total += 2 * (e - exponent[p]) * log_i[p];
                stack[++top] = {p, exponent[p]};
                exponent[p] = e;
            }
        }
        for (int a = 1; a * num <= sum; ++a) {
            select[++T] = num;
            dfs(depth - 1, sum - a * num, total - log_fac[a] - a * log_i[num]);
        }
        while (T > 0 && select[T] == num)
            --T;

        for (int i = 1; i <= cnt; ++i) {
            auto &it = stack[top--];
            exponent[it.first] = it.second;
        }
    }

    void dfs2(int depth, int sum, double total) {
        if (depth > sum)
            depth = sum;
        if (total + bests[sum] < 40) {
            return;
        }

        if (depth == 0) {
            if (sum != 0)
                return;

            count += 1;
            if (count % 10 == 0) {
                print("#{}, total = {}, ans = {}\n", count, total, ans);
                print("current: ");
                for (int i = 1; i <= T; ++i) {
                    print("{} ", select[i]);
                }
                print("\n");
            }

            if (ans < total) {
                swap(ans, total);
            }
            ans += log(1 + exp(total - ans));

            return;
        }

        dfs2(depth - 1, sum, total);
        int num = perm[depth];

        int cnt = 0;
        for (int idx = beg[num] + 1; idx <= end[num]; ++idx) {
            int p = factors[idx], e = exponents[idx];
            if (exponent[p] < e) {
                ++cnt;
                total += 2 * (e - exponent[p]) * log_i[p];
                stack[++top] = {p, exponent[p]};
                exponent[p] = e;
            }
        }
        for (int a = 1; a * num <= sum; ++a) {
            select[++T] = num;
            dfs2(depth - 1, sum - a * num, total - log_fac[a] - a * log_i[num]);
        }
        while (T > 0 && select[T] == num)
            --T;

        for (int i = 1; i <= cnt; ++i) {
            auto &it = stack[top--];
            exponent[it.first] = it.second;
        }
    }

    void main() {
        for (int i = 1; i <= n; ++i) {
            log_i[i] = log(i);
            log_fac[i] = log_fac[i - 1] + log_i[i];
        }

        int last = 0;
        for (int i = 2; i <= n; ++i) {
            beg[i] = last;
            for (int t = i, j = 2; t != 1; ++j) {
                if (t % j == 0) {
                    int p = j, e = 0;
                    for (; t % j == 0; t /= j)
                        ++e;
                    ++last;
                    factors[last] = p;
                    exponents[last] = e;
                    // factors[i].push_back({p, e});
                }
            }
            end[i] = last;
            is_prime[i] = beg[i] == end[i];;
            // print("all lcm {}: {}\n", i, exp(all_lcm[i]));
        }
        // for (int i = 1; i <= n; ++i) {
        //     ans = -1e100;
        //     best -= 1;
        //     perm[i] = new_numbers[i] = i;
        //     current_n = i;

        //     dfs(i, i, 0);

        //     for (int j = 1; j <= i; ++j)
        //         perm[j] = new_numbers[j];
        //     bests[i] = best;
        //     // answers[i] = ans;
        //     print("i = {}, best = {:.10f}, ans = {:.10e}\n", i, best, exp(ans));
        // }
        // print("perm = ");
        // for (int i = 1; i <= n; ++i) {
        //     print("{}, ", perm[i]);
        // }
        // print("\n");

        ans = -1e300;
        dfs2(n, n, 0);
        print("ans = {:.10e}\n", exp(ans));
    }
}

int main() {
    PE483::main();
    return 0;
}

/*
0.0000000000, 0.6931471806, 1.0986122887, 1.3862943611, 1.7917594692, 1.7917594692, 2.4849066498, 2.7080502011, 2.9957322736, 3.4011973817, 3.4011973817, 4.0943445622, 4.0943445622, 4.4308167988, 4.6539603502, 4.9416424226, 5.3471075307, 5.3471075307, 6.0402547113, 6.0402547113, 5.7990926545, 5.8861040315, 6.7334018918, 6.7334018918, 7.1388669999, 7.1388669999, 7.3395376954, 7.7450028035, 7.8320141805, 8.4381499841, 8.4381499841, 8.6052040687, 8.6052040687, 9.1312971646, 9.1312971646, 9.5367622727, 9.5367622727, 9.7038163574, 9.7038163574, 10.2299094533, 10.3099521610, 10.3969635380, 11.0030993415, 11.0030993415, 10.7154172691, 10.8489486617, 11.6962465221, 11.6962465221, 12.1017116302, 12.1017116302, 11.9645105087, 11.9645105087, 12.7948588108, 12.7948588108, 12.5370297015, 12.5370297015, 13.0631227974, 13.1431655050, 13.2301768820, 13.8363126856, 13.8363126856, 13.9475383207, 13.9475383207, 14.5294598662, 14.5294598662, 14.9349249743, 14.9349249743, 15.0461506094, 15.0461506094, 15.6280721548, 15.6280721548, 15.7392977899, 15.7392977899, 15.4814686806, 15.4814686806, 16.0075617765, 16.0876044842, 16.3212193354, 16.7807516648, 16.7807516648, 16.4930695923, 16.6266009849, 17.4738988453, 17.4738988453, 17.8793639534, 17.8793639534, 17.6649540821, 17.6649540821, 18.5725111340, 18.5725111340, 18.1816448253, 18.1816448253, 18.7635663708, 18.7635663708, 18.8747920059, 18.8747920059, 19.2656583145, 19.2656583145, 19.1430559925, 19.2230987001, 19.4567135513, 19.9162458807, 19.9162458807, 19.6285638082, 19.7620952009, 20.6093930612, 20.6093930612, 21.0148581694, 21.0148581694, 20.3217109888, 20.3217109888, 21.7080053499, 21.7080053499, 21.3025402418, 21.3025402418, 21.3133511579, 21.3133511579, 21.9398069640, 21.9398069640, 22.4011525305, 22.4011525305, 22.1308622007, 22.1308622007, 22.2420878358, 22.2420878358, 22.6329541445, 22.6329541445, 22.6996455190, 22.6996455190, 22.8240093813, 23.2835417107, 23.3174432624, 23.3502330852, 23.3502330852, 23.9766888912, 23.9766888912, 24.3821539993, 24.3821539993, 24.4488453738, 24.4488453738, 25.0753011799, 25.0753011799, 25.1419925544, 25.1419925544, 24.7365274463, 24.7365274463, 24.4662371166, 24.4662371166, 25.7684483605, 25.7684483605, 25.8351397350, 25.8351397350, 25.5648494052, 25.5648494052, 25.6760750403, 25.6760750403, 26.0669413490, 26.0669413490, 26.1739134686, 26.1739134686, 26.6847390923, 26.7175289152, 26.7514304668, 26.7514304668, 26.5633782353, 27.4106760957, 27.4106760957, 27.8161412038, 27.8161412038, 27.3778862729, 27.4445776474, 28.5092883844, 28.5092883844, 28.1038232763, 28.1038232763, 28.0597632865, 28.0597632865, 28.6862190925, 28.6862190925, 29.2024355649, 29.2024355649, 28.7888732466, 28.7888732466, 28.8555646211, 28.8555646211, 29.3793662731, 29.3793662731, 29.4460576476, 29.4460576476, 29.6079006731, 29.6079006731, 30.1187262968, 30.1187262968, 29.7132611887, 29.7132611887, 29.8955827455, 29.8955827455, 30.3010478536, 30.3284468278, 30.8118734774, 30.8118734774, 30.3983111590, 31.0215940084, 31.0215940084, 31.4270591165, 31.4270591165, 31.1242481624, 31.1242481624, 32.1202062970, 32.1202062970, 31.7147411889, 31.7147411889, 32.2228604511, 32.2228604511, 32.2704885001, 32.2704885001, 32.8133534776, 32.8133534776, 32.3997911593, 32.3997911593, 32.9160076317, 32.9160076317, 32.9636356806, 32.9636356806, 33.0364970289, 33.0364970289, 33.2188185857, 33.2188185857, 33.7296442095, 33.7296442095, 33.3241791014, 33.3241791014, 33.8322983635, 33.8322983635, 33.9119657663, 33.9119657663, 34.4227913900, 34.4227913900, 34.0146199203, 34.0420188945, 34.5254455441, 34.5254455441, 34.5730735931, 34.7351660751, 34.7351660751, 35.1406311832, 35.1406311832, 35.1882592322, 35.1882592322, 35.8337783637, 35.8337783637, 35.8814064127, 35.8814064127, 35.4759413046, 35.5214036787, 35.9840605668, 35.9840605668, 36.5269255443, 36.5269255443, 36.5745535933, 36.5745535933, 36.1609912749, 36.1609912749, 36.6772077473, 36.6772077473, 36.7500690956, 36.7500690956, 36.9323906524, 36.9323906524, 37.4432162762, 37.4432162762, 37.4908443252, 37.4908443252, 37.2200727249, 37.2200727249, 37.6255378330, 37.6255378330, 38.1363634567, 38.1363634567, 38.1839915057, 38.1839915057, 37.7758200360, 37.8032190102, 38.2866456598, 38.2866456598, 37.8963094333, 38.4963661908, 38.5418285648, 38.9018312989, 38.9018312989, 38.5894566138, 38.5853136768, 39.5949784794, 39.5949784794, 39.1895133713, 39.2349757454, 39.6839259654, 39.6839259654, 39.7315540144, 39.7315540144, 40.2881256600, 40.2881256600, 39.8342081685, 39.8342081685, 40.3770731460, 40.3770731460, 40.4247011950, 40.4247011950, 40.5112692113, 40.5112692113, 40.6935907681, 40.6935907681, 41.2044163919, 41.2044163919, 40.7989512838, 40.7989512838, 41.2933638779, 41.2933638779, 41.3867379487, 41.3867379487, 41.8975635724, 41.8975635724, 41.4756854347, 41.4756854347, 41.9865110584, 41.9865110584, 42.0341391074, 42.0341391074, 41.6259676377, 41.6533666119, 42.3030286805, 42.3030286805, 42.1542834193, 42.3465137925, 42.3919761665, 42.7519789006, 42.7519789006, 42.5907107530, 42.9961758611, 43.4451260811, 43.4451260811, 43.0396609730, 43.0851233471, 43.0851233471, 43.1327513961, 43.5652703930, 43.5652703930, 44.1382732617, 44.1382732617, 43.6542178790,
ans = 9.0946488774
*/
