#!/usr/bin/env python
from itertools import *
from bisect import bisect_left

def primes(n): 
    if n==2: return [2]
    elif n<2: return []
    s=range(3,n+1,2)
    mroot = n ** 0.5
    half=(n+1)/2-1
    i=0
    m=3
    while m <= mroot:
        if s[i]:
            j=(m*m-3)/2
            s[j]=0
            while j<half:
                s[j]=0
                j+=m
        i=i+1
        m=2*i+3
    return [2]+[x for x in s if x]

def concatenations(numbers):
    for p in permutations(numbers, 2):
        yield int(''.join(map(str, p)))

def main():
    # sqrt(1000000000) = 31622
    __primes = set(islice(primes(31622), 1, None))

    for combination in combinations(primes(1000), 4):
        c = concatenations(combination)
        if all(p in __primes for p in c):
            print(combination)
            return

if __name__ == "__main__":
    main()
